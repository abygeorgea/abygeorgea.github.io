<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aby George A]]></title>
  <link href="http://www.abygeorgea.com/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2017-08-29T22:22:57+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ANZTB SIGiST Conference]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/29/anztb-sigist-conference/"/>
    <updated>2017-08-29T21:32:28+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/29/anztb-sigist-conference</id>
    <content type="html"><![CDATA[<p>Today, I had a chance to attend SIGiST conference organised by ANZTB. It was a 2-hour session which includes a presentation, discussion, and networking opportunities. Being a first-time attendee to SIGiST, I was not sure what surprise I may have. Overall it was a fruitful session and I had a chance to meet people from other organisation and to understand what is happening at their end.</p>

<p>Today&rsquo;s presentation was about &ldquo;Test Automation – What YOU need to know&rdquo;. Over all, it was a good session even though I found the presentation is more geared towards uplifting manual testers and what steps they should take to stay relevant in today&rsquo;s world. Going by crowd surrounding presenters after the session, it seems topic was well received and resonated with most of the people in the room. But those who have experience in automation / performance testing will find it basic. The presentation is expected to be uploaded <a href="http://www.anztb.org/downloads.php">here</a> in few days.</p>

<p>The topic for discussion was &ldquo;Carriers in Testing&rdquo;. This was really engaging and people participated actively sharing their experiences in career progression, experience in getting jobs etc. There was pretty lengthy discussion about how to make your resume stand out in the crowd, importance of certification, soft skill, analytically and debugging skills and how to market yourself. Few recruiters/managers shed thoughts on what they look in prospective employee&rsquo;s resume and how they short list candidates for interview.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Postman Collection Using Newman]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/07/running-postman-collection-using-newman/"/>
    <updated>2017-08-07T15:46:28+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/07/running-postman-collection-using-newman</id>
    <content type="html"><![CDATA[<p>In previous <a href="http://www.abygeorgea.com/blog/2017/08/05/postman-tutorial/">blog</a>, I explained about how to create a GET request, analyze its response, write test cases for API and to save details to a collection for future use. In this blog, let me explain about how to run collections using Newman.</p>

<h3>What is Newman</h3>

<p>Newman is a command line collection runner for postman. Newman also has feature parity with Postman and it runs collection in the same way how it is run through Postman. Newman also makes it easier to integrate API test case execution with other systems like Jenkins.</p>

<h3>Installing Newman</h3>

<p>Newman is built on Node.js and hence it requires Node.js to be installed as prerequisite. Newman can be installed from npm with below command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g newman</span></code></pre></td></tr></table></div></figure>


<h3>Running collection using Newman</h3>

<p>Collections are executed by calling run command in Newman. Basic command for executing collections is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>newman run PathToCollectionFile -e PathToEnvironmentFileIfAny</span></code></pre></td></tr></table></div></figure>


<p>Below is an example of running collections created in previous blog post using newman.
Command will look like below
<code>newman run /Users/abygeorgea/Projects/Postman/Postman\ Tutorial.postman_collection.json -e /Users/abygeorgea/Projects/Postman/Test.postman_environment.json</code></p>

<h3>Results</h3>

<p>The result of API test case execution will look like below. It has a detailed report of number of iterations, number of request, test scripts, pre-requisites, assertions etc. As per standard, passed ones are shown in green and failed in red. The results look similar to details provided if collections are executed using postman.</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/07/Newman%201.png" alt="NewmanResult" /></p>

<h3>Additional Options of run command</h3>

<p>Newman has various options to customize run. Different options can be found by running with <code>-h</code> flag</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>newman run -h</span></code></pre></td></tr></table></div></figure>


<p>Different options listed are below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Abys-MacBook-Pro:~ abygeorgea$ newman run -h
</span><span class='line'>usage: newman run [-h] [-v VERSION] [--no-color] [--color]
</span><span class='line'>                  [--timeout-request TIMEOUT_REQUEST] [--ignore-redirects]
</span><span class='line'>                  [-k] [--ssl-client-cert SSL_CLIENT_CERT]
</span><span class='line'>                  [--ssl-client-key SSL_CLIENT_KEY]
</span><span class='line'>                  [--ssl-client-passphrase SSL_CLIENT_PASSPHRASE]
</span><span class='line'>                  [-e ENVIRONMENT] [-g GLOBALS] [--folder FOLDER]
</span><span class='line'>                  [-r REPORTERS] [-n ITERATION_COUNT] [-d ITERATION_DATA]
</span><span class='line'>                  [--export-environment [EXPORT_ENVIRONMENT]]
</span><span class='line'>                  [--export-globals [EXPORT_GLOBALS]]
</span><span class='line'>                  [--export-collection [EXPORT_COLLECTION]]
</span><span class='line'>                  [--delay-request DELAY_REQUEST] [--bail] [-x] [--silent]
</span><span class='line'>                  [--disable-unicode] [--global-var GLOBAL_VAR]
</span><span class='line'>                  collection
</span><span class='line'>
</span><span class='line'>The "run" command can be used to run Postman Collections
</span><span class='line'>
</span><span class='line'>Positional arguments:
</span><span class='line'>  collection            URL or path to a Postman Collection
</span><span class='line'>
</span><span class='line'>Optional arguments:
</span><span class='line'>  -h, --help            Show this help message and exit.
</span><span class='line'>  -v VERSION, --version VERSION
</span><span class='line'>                        Display the newman version
</span><span class='line'>  --no-color            Disable colored output
</span><span class='line'>  --color               Force colored output (for use in CI environments)
</span><span class='line'>  --timeout-request TIMEOUT_REQUEST
</span><span class='line'>                        Specify a timeout for requests (in milliseconds)
</span><span class='line'>  --ignore-redirects    If present, Newman will not follow HTTP Redirects
</span><span class='line'>  -k, --insecure        Disables SSL validations.
</span><span class='line'>  --ssl-client-cert SSL_CLIENT_CERT
</span><span class='line'>                        Specify the path to the Client SSL certificate. 
</span><span class='line'>                        Supports .cert and .pfx files.
</span><span class='line'>  --ssl-client-key SSL_CLIENT_KEY
</span><span class='line'>                        Specify the path to the Client SSL key (not needed 
</span><span class='line'>                        for .pfx files).
</span><span class='line'>  --ssl-client-passphrase SSL_CLIENT_PASSPHRASE
</span><span class='line'>                        Specify the Client SSL passphrase (optional, needed 
</span><span class='line'>                        for passphrase protected keys).
</span><span class='line'>  -e ENVIRONMENT, --environment ENVIRONMENT
</span><span class='line'>                        Specify a URL or Path to a Postman Environment
</span><span class='line'>  -g GLOBALS, --globals GLOBALS
</span><span class='line'>                        Specify a URL or Path to a file containing Postman 
</span><span class='line'>                        Globals
</span><span class='line'>  --folder FOLDER       Run a single folder from a collection
</span><span class='line'>  -r REPORTERS, --reporters REPORTERS
</span><span class='line'>                        Specify the reporters to use for this run.
</span><span class='line'>  -n ITERATION_COUNT, --iteration-count ITERATION_COUNT
</span><span class='line'>                        Define the number of iterations to run.
</span><span class='line'>  -d ITERATION_DATA, --iteration-data ITERATION_DATA
</span><span class='line'>                        Specify a data file to use for iterations (either 
</span><span class='line'>                        json or csv)
</span><span class='line'>  --export-environment [EXPORT_ENVIRONMENT]
</span><span class='line'>                        Exports the environment to a file after completing 
</span><span class='line'>                        the run
</span><span class='line'>  --export-globals [EXPORT_GLOBALS]
</span><span class='line'>                        Specify an output file to dump Globals before exiting
</span><span class='line'>  --export-collection [EXPORT_COLLECTION]
</span><span class='line'>                        Specify an output file to save the executed collection
</span><span class='line'>  --delay-request DELAY_REQUEST
</span><span class='line'>                        Specify the extent of delay between requests 
</span><span class='line'>                        (milliseconds)
</span><span class='line'>  --bail                Specify whether or not to gracefully stop a 
</span><span class='line'>                        collection run on encountering the first error
</span><span class='line'>  -x, --suppress-exit-code
</span><span class='line'>                        Specify whether or not to override the default exit 
</span><span class='line'>                        code for the current run
</span><span class='line'>  --silent              Prevents newman from showing output to CLI
</span><span class='line'>  --disable-unicode     Forces unicode compliant symbols to be replaced by 
</span><span class='line'>                        their plain text equivalents
</span><span class='line'>  --global-var GLOBAL_VAR
</span><span class='line'>                        Allows the specification of global variables via the 
</span><span class='line'>                        command line, in a key=value format</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postman Tutorial]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/05/postman-tutorial/"/>
    <updated>2017-08-05T07:09:48+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/05/postman-tutorial</id>
    <content type="html"><![CDATA[<p>Recently one of my colleagues has asked me to train him on using postman and Newman for API testing. Below is a cut down version of training session which I took for him.</p>

<h3>What is Postman</h3>

<p>Postman is an Http client for testing web services. It has a friendly GUI for constructing request and analyzing the response. There is a command line tool called Newman for running the postman collections from command line. This will help to integrate postman to other testing tools.</p>

<h3>How to Install</h3>

<p>Postman is available as both chrome extension and also as a native install. Native install files can be found <a href="https://www.getpostman.com/apps">here</a>.</p>

<h3>Example - GET Request</h3>

<p>In order to trigger a get request, we need to identify below information</p>

<ul>
<li>URL of API</li>
<li>Authentication details</li>
<li>Header details</li>
</ul>


<p>For this example, let us look at a google finance API.  API URL(including parameters) is <a href="http://www.google.com/finance/info?infotype=infoquoteall&amp;q=NSE:BHEL">http://www.google.com/finance/info?infotype=infoquoteall&amp;q=NSE:BHEL</a>
There is no authentication details and header details that need to be passed with this. The <code>params</code> button will list down various parameters passed in a tabular format , which makes it easy to edit.</p>

<p>In postman, Select drop down as <code>GET</code> and enter the API Url. Screen will look like below
<img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%201.png" alt="Request" /></p>

<p>Now hit <code>Send</code> button. This will trigger a call to API and get the response which will then displayed in UI. Screen will look like below</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%202.png" alt="Body" /></p>

<p>Headers returned are</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%203.png" alt="Headers" /></p>

<h3>Writing Tests</h3>

<p>Above is an example of calling an API and analyzing its response. Postman also has a facility to write test cases to verify the response. Test cases are written in javascript. Tests are run after the request is sent and it will allow access to response objects. The editor also provides commonly used code snippets which make it easier to write test.</p>

<p>The Below example is written for calling one of free API mentioned <a href="https://jsonplaceholder.typicode.com">here</a>.
In this example, we have test scripts for checking status code, values in the header, values in response, response time. We can even expand the test cases to complex verifications by writing javascript tests.</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%204.png" alt="Tests" /></p>

<p>We notice following from above screenshot,</p>

<ul>
<li>6 test cases written on the top part to check for the status code, response time, header and response.</li>
<li>The response received on the bottom part.</li>
<li>Test tab shows that 6/6 test cases are passed ( in Green).</li>
</ul>


<p> Now let us dive into details of the test results. Below screenshot shows details of test cases and their status.</p>

<p> <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%205.png" alt="Test Result" /></p>

<h3>Collections</h3>

<p>We can save the current request and it associated tests ( if any) for future use in postman. It can also be exported and shared with others. Select option as <code>Save As</code> from drop down next to <code>Save</code>. We can specify request name, provide a description and select a folder and sub folder to save the response.</p>

<p> <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%206.png" alt="Collections" /></p>

<p> Once saved, it will be available for use in collections.</p>

<p>  <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%207.png" alt="Collections" /></p>

<h3>Environments</h3>

<p>Very frequently, we will have to run API test in different environments. Most of the time, there will be few differences in the requests, like different URL. In such cases, we can use environments in Postman.</p>

<p>Click on the Settings button on top right corner and select <code>Manage environments</code>. This is open up a new pop up where we can add Environment or import an existing environment file. For this tutorial, we will use Add option.</p>

<p>  <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%208.png" alt="Environment" /></p>

<p> Now we can specify all unique parameter for each environment. In this case, I have given a key called &ldquo;URL&rdquo; and entered corresponding values and saved it as an environment named <code>Test</code>.</p>

<p> <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%209.png" alt="Environment" /></p>

<p> <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2010.png" alt="Environment" /></p>

<p> Now let us run the request using environments. First step is to replace <code>https://jsonplaceholder.typicode.com</code> with <code>url</code> in double curly braces. Then select <code>Test</code> in the Environment drop down at the top. Now click send. This will execute the request and run all associated test cases. Postman will dynamically replace  with corresponding URL value specified in selected environment file. So assuming we have different environment files, each time the request will be sent to different URL based on environment selected. We can have any number of keys and values in one environment file.</p>

<p>  <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2011.png" alt="Environment" /></p>

<p>  From above, we can see that one test case is failed. Let us have a look into failed test case.</p>

<p>   <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2012.png" alt="Environment" /></p>

<p>  Failed test case is for the time taken for the response. Current request took 1491 ms which is higher than expected 200ms.</p>

<h3>Exporting Collections and environment files</h3>

<p>Postman provides facility to export collections and environment files as JSON. This helps to share the details with other team members and also to use Newman for running postman collections. Let us have a look into how to export them.</p>

<p><strong>Exporting Collections</strong></p>

<ul>
<li>Click on Collections Tab.</li>
<li>Click on <code>...</code> next to Collections Name.</li>
<li>Click on Export.</li>
<li><p>Select V2 option and save the file.</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2013.png" alt="Collection" /></p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2014.png" alt="Collection" /></p></li>
</ul>


<p><strong>Exporting Environment File</strong></p>

<ul>
<li>Click on Settings button on top right corner.</li>
<li>Click on Manage environment.</li>
<li><p>Download the file.</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2015.png" alt="Export" /></p></li>
</ul>


<h3>Running Collections Using Postman Collection Runner</h3>

<p>Postman provides a feature to run collections using collection Runner.</p>

<ul>
<li>Click on Runner button on Top left to open collection runner</li>
<li><p>Select Collection name in drop down and select environment and then hit <code>Start Run</code>.</p>

<p><img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2016.png" alt="Collection Runner" /></p></li>
</ul>


<p>This will trigger execution of request and test cases mentioned in collection and results will be shown. Also note that collection runner has additional options like number of iteration, delay before sending request , input from data file etc .</p>

<p>Once execution is complete, result will be shown like below. It will have details of all assertions done and options to export results for future verification.
  <img src="http://www.abygeorgea.com/images/2017/08/05/Postman%20Tutorial%2017.png" alt="Collection Runner" /></p>

<h3>What Next ?</h3>

<p>In this post, I have explain basic usage of postman for API testing . However the functionalities provided by postman is much more than above. We can also use Newman , which is command line collection runner , to execute collections. I will write another post about it sometime soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting Substring Using Javascript]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/07/21/extracting-substring-using-javascript/"/>
    <updated>2017-07-21T06:09:53+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/07/21/extracting-substring-using-javascript</id>
    <content type="html"><![CDATA[<p>In previous blogs <a href="http://www.abygeorgea.com/blog/2017/04/27/stubbing-xml-responses-using-mountebank/">here</a> , I have explained how we return a XML response using mountebank. However , most of the time, we will have to make some modification to the template response before returning a response. Say for example, we may have to replace details like timestamp, or use an input from request parameter and update that in response etc.</p>

<p>One of the easiest way to do this without using other frameworks like xml2js etc is to extract the substring between the node values and replace it . Below is a code snippet which will help to achieve this</p>

<p>The sample xml which we need to return is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Status&gt;Added&lt;/Status&gt;
</span><span class='line'>&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;</span></code></pre></td></tr></table></div></figure>


<p>In above example, assume that we need to replace the inserted record value every time based on the request coming through . We can do that by below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">xmldata</span> <span class="o">=</span> <span class="s2">&quot;&lt;Status&gt;Added&lt;/Status&gt;\r\n&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">generatedId</span> <span class="o">=</span> <span class="nx">xmldata</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&lt;GeneratedID&gt;&quot;</span><span class="o">+</span><span class="s2">&quot;(.*)&quot;</span><span class="o">+</span><span class="s2">&quot;&lt;/GeneratedID&gt;&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generatedId</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Output will be as below. from Array we can extract the substring, index of its location etc</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">[ &#39;&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;&#39;,</span>
</span><span class='line'><span class="cm">  &#39;12345&#39;,</span>
</span><span class='line'><span class="cm">  index: 24,</span>
</span><span class='line'><span class="cm">  input: &#39;&lt;Status&gt;Added&lt;/Status&gt;\r\n&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;&#39; ]</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//so extract data from first location to get substring  </span>
</span><span class='line'><span class="nx">generatedId</span> <span class="o">=</span> <span class="nx">xmldata</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&lt;GeneratedID&gt;&quot;</span><span class="o">+</span><span class="s2">&quot;(.*)&quot;</span><span class="o">+</span><span class="s2">&quot;&lt;/GeneratedID&gt;&quot;</span><span class="p">))[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generatedId</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Above will print &quot;12345&quot; , which is the expected value</span>
</span><span class='line'><span class="c1">// This can be used for extracting value of xml nodes</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//if we need to replace this with another value ( possibly coming from request parameter)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">xmldata</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">generatedId</span><span class="p">,</span> <span class="s2">&quot;99999&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predicates in Mountebank]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/07/15/predicates-in-mountebank/"/>
    <updated>2017-07-15T21:07:40+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/07/15/predicates-in-mountebank</id>
    <content type="html"><![CDATA[<p>Predicates in Mountebank imposter files is a pretty powerful way to configure stubs. It helps us to return different responses based on the request parameters like type, query string , headers, body etc. Let us have some quick look at extracting values from request</p>

<h3>Based on Query String</h3>

<p>Below is an example of extracting the records based on query string.
If the request is like <code>path?customerId=123&amp;customerId=456&amp;email=abc.com</code>
Note: This is slightly modified version of code in mbtest.org</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "port": 4547,
</span><span class='line'>  "protocol": "http",
</span><span class='line'>  "stubs": [
</span><span class='line'>    {
</span><span class='line'>      "predicates": [{
</span><span class='line'>        "equals": {
</span><span class='line'>          "query": { "customerId": ["123", "456"] }
</span><span class='line'>        }
</span><span class='line'>      }],
</span><span class='line'>      "responses": [{
</span><span class='line'>        "is": {
</span><span class='line'>          "body": "Customer ID is either 123 or 456"
</span><span class='line'>        }
</span><span class='line'>      }]
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "predicates": [{
</span><span class='line'>        "equals": {
</span><span class='line'>          "query": { 
</span><span class='line'>              "customerId": "123",
</span><span class='line'>              "email" :"abc.com"
</span><span class='line'>               }
</span><span class='line'>        }
</span><span class='line'>      }],
</span><span class='line'>      "responses": [{
</span><span class='line'>        "is": {
</span><span class='line'>          "body": "Customer ID is 123 and email is abc.com"
</span><span class='line'>        }
</span><span class='line'>      }]
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Based on Header Content</h3>

<p>If input data is shared through values in header, that can be extracted. Below snippet is directly from mbtest.org</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "port": 4545,
</span><span class='line'>  "protocol": "http",
</span><span class='line'>  "stubs": [
</span><span class='line'>    {
</span><span class='line'>      "responses": [{ "is": { "statusCode": 400 } }],
</span><span class='line'>      "predicates": [
</span><span class='line'>        {
</span><span class='line'>          "equals": {
</span><span class='line'>            "method": "POST",
</span><span class='line'>            "path": "/test",
</span><span class='line'>            "query": {
</span><span class='line'>              "first": "1",
</span><span class='line'>              "second": "2"
</span><span class='line'>            },
</span><span class='line'>            "headers": {
</span><span class='line'>              "Accept": "text/plain"
</span><span class='line'>            }
</span><span class='line'>          }
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>          "equals": { "body": "hello, world" },
</span><span class='line'>          "caseSensitive": true,
</span><span class='line'>          "except": "!$"
</span><span class='line'>        }
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>   ]
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Galen Framework - Getting Started]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/25/galen-framework-getting-started/"/>
    <updated>2017-06-25T05:39:02+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/25/galen-framework-getting-started</id>
    <content type="html"><![CDATA[<p>In previous <a href="{site.root}}blog/2017/06/21/automated-testing-of-responsive-web-design">post</a>, I mentioned that we can use Galen for automated lay out testing. Galen offers a simple solution to test location of objects relative to each other on the page. Galen is implemented using Selenium Web driver. Hence we can use it for normal functional automation testing as well.</p>

<h3>Documentation of Galen</h3>

<ul>
<li>Galen has its own domain specific language to define Specs. Detailed documentation can be found <a href="http://galenframework.com/docs/reference-galen-spec-language-guide/">here</a>.</li>
<li>Galen has its own javascript API which provides a list of functions which make writing test cases easier. Detailed documentation can be found <a href="http://galenframework.com/docs/reference-galen-javascript-api/">here</a>.</li>
<li>Galen pages javascript API is light weight javascript test framework. Details are available <a href="http://galenframework.com/docs/reference-galenpages-javascript-api/">here</a>.</li>
<li>Details of galen test suite syntax are <a href="http://galenframework.com/docs/reference-galen-test-suite-syntax/">here</a>.</li>
<li>Galen framework has a detailed documentation of its usage and functions <a href="http://galenframework.com/docs/all/">here</a>.</li>
</ul>


<h3>Installation</h3>

<p>Below are high-level steps to help you get started.</p>

<ol>
<li>Ensure Java is installed. Galen needs Java version above 1.8</li>
<li>Download binary from <a href="http://galenframework.com/download/">http://galenframework.com/download/</a></li>
<li>Extract the zip file</li>
<li>Add the location of extracted files to PATH  environment variables. A detailed guide for older versions of Windows is available <a href="http://mindengine.net/post/2014-01-08-configuring-galen-framework-for-windows">here</a>.</li>
<li>Alternatively, on Windows , you can create a bat file to run Galen by changing Path on the fly. Details are in below steps.</li>
</ol>


<h3>Setting up Galen Framework</h3>

<p>There are different framework available for testing responsive design based on Galen. <a href="https://github.com/galenframework/galen-bootstrap">Galen bootstrap</a> is one of such framework which can be reused.</p>

<ul>
<li>Download and extract the project from Github. Keep relevant files only. You can remove</li>
<li>Create an <code>init.js</code> file to load
<code>galen-bootstrap/galen-bootstrap.js</code>script and configure all devices and a website URL for testing. URL mentioned below is an example of responsive web design template.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">load</span><span class="p">(</span><span class="s2">&quot;galen-bootstrap/galen-bootstrap.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//$galen.settings.website = &quot;https://alistapart.com/d/responsive-web-design/ex/ex-site-FINAL.html&quot;;</span>
</span><span class='line'><span class="c1">//$galen.registerDevice(&quot;mobile&quot;, inLocalBrowser(&quot;mobile emulation&quot;, &quot;450x800&quot;, [&quot;mobile&quot;]));</span>
</span><span class='line'><span class="c1">//$galen.registerDevice(&quot;tablet&quot;, inLocalBrowser(&quot;tablet emulation&quot;, &quot;600x800&quot;, [&quot;tablet&quot;]));</span>
</span><span class='line'><span class="c1">//$galen.registerDevice(&quot;desktop&quot;, inLocalBrowser(&quot;desktop emulation&quot;, &quot;1024x768&quot;, [&quot;desktop&quot;]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: Uncomment the lines above. Octopress blog engine was throwing error when it tries generate post.</p>

<ul>
<li>Run <code>galen config</code> from the command line with the project directory. This will create Galen config file in the location where the command is run.</li>
</ul>


<p><img src="http://www.abygeorgea.com/images/2017/06/25/GalenframeworkGettingStarted01.png" alt="Create Galen Config" /></p>

<ul>
<li>Modify galen.config file to make chrome as default browser and add path to chrome driver. There are other useful configs like range approximation, screenshot, selenium grid etc in the config.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">galen</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nx">browser</span><span class="o">=</span><span class="nx">chrome</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">webdriver</span><span class="p">.</span><span class="nx">chrome</span><span class="p">.</span><span class="nx">driver</span><span class="o">=</span><span class="p">.</span><span class="err">\\</span><span class="p">..</span><span class="err">\\</span><span class="nx">WebProject</span><span class="err">\\</span><span class="nx">Driver</span><span class="err">\\</span><span class="nx">chromedriver</span><span class="p">.</span><span class="nx">exe</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a folder named <code>Test</code> for keeping test cases and create test files <code>example.test.js</code>. Copy below content to <code>example.test.js</code>. Make sure to update the relative location of the init.js file created in previous steps. Below content loads init.js file which lists out website URL, device sizes that need to be tested.It then calls a function to test on all devices. Check layout is one of the available javascript API function.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">load</span> <span class="p">(</span><span class="s2">&quot;.\\..\\init.js&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">testOnAllDevices</span><span class="p">(</span><span class="s2">&quot;Welcome page test&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">driver</span><span class="p">,</span> <span class="nx">device</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">checkLayout</span><span class="p">(</span><span class="nx">driver</span><span class="p">,</span> <span class="s2">&quot;specs/homepage.gspec&quot;</span><span class="p">,</span> <span class="nx">device</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="nx">device</span><span class="p">.</span><span class="nx">excludedTags</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a folder named <code>specs</code> and create a spec file named <code>homepage.gspec</code>. We need to update the specs with layout checks . Below is the sample spec for checking image and section intro for the sample URL from init.js. First section defines the objects and its identifier. Second section says that on desktop, image will on left side of section intro and on mobile and tablet, it will be above section intro</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">@</span><span class="nx">objects</span>
</span><span class='line'>  <span class="nx">image</span>        <span class="nx">id</span>         <span class="nx">logo</span>
</span><span class='line'>  <span class="nx">menu</span>         <span class="nx">css</span>        <span class="err">#</span><span class="nx">page</span> <span class="o">&gt;</span> <span class="nx">div</span> <span class="o">&gt;</span> <span class="nx">div</span><span class="p">.</span><span class="nx">mast</span> <span class="o">&gt;</span> <span class="nx">ul</span>
</span><span class='line'>  <span class="nx">sectionintro</span>    <span class="nx">css</span>     <span class="err">#</span><span class="nx">page</span> <span class="o">&gt;</span> <span class="nx">div</span> <span class="o">&gt;</span> <span class="nx">div</span><span class="p">.</span><span class="nx">section</span><span class="p">.</span><span class="nx">intro</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span> <span class="nx">Main</span>  <span class="nx">Section</span> <span class="o">=</span>
</span><span class='line'>  <span class="nx">image</span><span class="o">:</span>
</span><span class='line'>      <span class="err">@</span><span class="nx">on</span> <span class="nx">desktop</span>
</span><span class='line'>          <span class="nx">left</span><span class="o">-</span><span class="nx">of</span> <span class="nx">sectionintro</span>
</span><span class='line'>      <span class="err">@</span><span class="nx">on</span> <span class="nx">mobile</span><span class="p">,</span> <span class="nx">tablet</span>
</span><span class='line'>          <span class="nx">above</span> <span class="nx">sectionintro</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now create a bat file in the main folder to run the galen test cases. Make sure to give relative paths to test file, configs, reports correctly. Modify Path variable to include path location to galen bin. This is not needed if we manually set pah while installing. However, I prefer to have galen bin files as well in source control and point the path to that location so that we don&rsquo;t have any specific dependency outside the project.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">SET</span> <span class="nx">PATH</span><span class="o">=%</span><span class="nx">PATH</span><span class="o">%</span><span class="p">;.</span><span class="err">\</span><span class="nx">galen</span><span class="o">-</span><span class="nx">bin</span>
</span><span class='line'><span class="nx">galen</span> <span class="nx">test</span> <span class="p">.</span><span class="err">\\</span><span class="nx">test</span><span class="err">\\</span><span class="nx">example</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">js</span>  <span class="o">--</span><span class="nx">htmlreport</span> <span class="p">.</span><span class="err">\</span><span class="nx">reports</span>   <span class="o">--</span><span class="nx">jsonreport</span> <span class="p">.</span><span class="err">\</span><span class="nx">jsonreports</span> <span class="o">--</span><span class="nx">config</span> <span class="p">.</span><span class="err">\</span><span class="nx">galen</span><span class="p">.</span><span class="nx">config</span>
</span></code></pre></td></tr></table></div></figure>


<p>once all files are created, folder structure will look like below
<img src="http://www.abygeorgea.com/images/2017/06/25/GalenframeworkGettingStarted00.png" alt="" /></p>

<ul>
<li>run the bat file created above. This will ideally run example.test.js file which invokes chrome driver, navigate to the URl, resizes the browser and then check for the specs.It will list out the results in command prompt. Once it completes are all test execution, it creates both HTML report and JSON report in corresponding folder location mentioned in bat file. Below is a sample HTML report, which is self-explanatory.</li>
</ul>


<p>Main report
<img src="http://www.abygeorgea.com/images/2017/06/25/GalenframeworkGettingStarted02.png" alt="" /></p>

<p>If we expand the result for desktop emulation, it will look like below.It will list down each assertion made and indicate whether it is passed or failed.
<img src="http://www.abygeorgea.com/images/2017/06/25/GalenframeworkGettingStarted03.png" alt="" /></p>

<p>If we click on the assertion point, it will show the screenshot taken for that assertion by highlighting the objects which will help for easier verification. Below screenshot shows that image is on left side of section intro as defined in spec file.
<img src="http://www.abygeorgea.com/images/2017/06/25/GalenframeworkGettingStarted04.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Testing of CSS for Responsive Web Design]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/21/automated-testing-of-responsive-web-design/"/>
    <updated>2017-06-21T06:15:55+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/21/automated-testing-of-responsive-web-design</id>
    <content type="html"><![CDATA[<p>In a world where mobile first seems to be the norm, testing of look and feel of websites on various mobile/tablet devices are essential. More businesses are now adopting Responsive Web designs for developing their web applications and sites.</p>

<h3>What is Responsive Web Design</h3>

<p>According to <a href="https://en.wikipedia.org/wiki/Responsive_web_design">Wikipedia</a>, Responsive web design (RWD) is an approach to web design aimed at allowing desktop webpages to be viewed in response to the size of the screen or web browser one is viewing with. In addition, it&rsquo;s important to understand that Responsive Web Design tasks include offering the same support to a variety of devices for a single website. A site designed with RWD adapts the layout to the viewing environment by using fluid, proportion-based grids, flexible images, and CSS3 media queries, an extension of the @media rule, in the following ways:</p>

<ul>
<li>The fluid grid concept calls for page element sizing to be in relative units like percentages, rather than absolute units like pixels or points.</li>
<li>Flexible images are also sized in relative units, so as to prevent them from displaying outside their containing element.</li>
<li>Media queries allow the page to use different CSS style rules based on characteristics of the device the site is being displayed on, most commonly the width of the browser</li>
</ul>


<h3>How do we test responsiveness</h3>

<p>An ideal option for testing is to test on different physical devices of various screen size. However, it is impossible to get hold of all available mobile/tablet devices in the market. Even if we prioritize the devices using analytics, it is very expensive to buy enough number of devices. Along with this, we need to upgrade to newer version of devices frequently when apple/google/Samsung releases an upgraded version.</p>

<p>Next possible option is to use device emulators like device mode in Chrome dev tools. As pointed out in their <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/">documentation</a>, it is only a close approximation of how the website will look on a mobile device.It have its own limitations which are listed <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports">here</a></p>

<p>Best approach will be to use emulators early in development cycle and once UX design is stabilized, then test it on physical device based on priority obtained by analytics.</p>

<h3>Challenges in testing Responsive Websites</h3>

<p>Testing of responsive websites has its own challenges.</p>

<ul>
<li>Number of Options to be tested or number of  breakpoints which needs to be validated are high</li>
<li><p>Distinctive UI designs for different device screen sizes makes testing time consuming. This adds complexity to testing since it will require testing of below in various screen sizes</p>

<ul>
<li>All UI elements like image, text, controls are aligned properly with each other and doesn&rsquo;t overflow from screen display area</li>
<li>Consistency in font size, color, shades , padding, display orientation etc</li>
<li>Resizing of controls which take inputs (like text) to cater for long content typed in by users.</li>
<li>Other CSS validation specific for mobile and tablet devices</li>
</ul>
</li>
<li><p>It is hard to test all of the above on every iteration manually.</p></li>
<li>Comparing UI &amp; UX &amp; Visual design will require more efforts.</li>
<li>Hard to keep track of every feature that needs to be tested and will have testing fatigue which will result in Non-obvious changes to UI</li>
</ul>


<h3>Automated Responsive Design testing - Galen Framework</h3>

<p>As mentioned above, one of the pain points in responsive design testing is the user fatigue happening over multiple iterations of testing. This can be easily avoided by having an automated test framework. I recently came across galen framework which is an open source framework to test layouts of webpages. You can read about Galen framework <a href="http://galenframework.com/">here.</a>
Galen framework can be used for automation of CSS testing easier. It has evolved over time and has its own Domain specific language and commands which can be used for CSS testing. I will go through galen framework in more details in next post</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Squash Commits in Git]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/15/how-to-squash-commits-in-git/"/>
    <updated>2017-06-15T05:46:39+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/15/how-to-squash-commits-in-git</id>
    <content type="html"><![CDATA[<p>Very often we will be committing smaller pieces of work in our local machine as we go. However before we push them to a centralized repository, we may have to combine these small commits to single large commit, which makes sense for rest of the team. I will explain how this can be achieved by using interactive rebasing.</p>

<p>To start with, let us assume the initial commits history look like below. It have 4 minor commits done to the same file.
<img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image1.png" alt="Initial Commit Structure" /></p>

<p>Now we need to squash last for commits into a single commit. The command required for that is as below. This tells git to rebase head with previous 4 commits in an interactive mode.</p>

<pre><code>    $ git rebase -i HEAD~4
</code></pre>

<p>This will pop up another editor with details of last 4 commits and some description about possible actions on this. Initially, all of them will have a default value of PICK. Since we are trying to squash commits together, we can select one of the commits as PICK and rest all needs to be changed as SQUASH. Save and close the editor once all changes are made.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image2.png" alt="Interactive Rebasing" /></p>

<p>After this, another popup will appear with comments given for each of the commits. We can comment out unnecessary comments by using <code>#</code> and also modify required comments as we need. In below screen, I have modified comments for the first commit and commented out rest all. Save and close the editor once all changes are made.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image3.png" alt="Selecting comments" /></p>

<p>Now Git will continue rebasing and it will squash all commits as selected in the previous step.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image4.png" alt="Git rebase" /></p>

<p>If we look at commit history, we can see that commits are now squashed to single commit.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image5.png" alt="Squashed Result" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Octopress]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/05/20/migrating-to-octopress/"/>
    <updated>2017-05-20T05:57:24+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/05/20/migrating-to-octopress</id>
    <content type="html"><![CDATA[<p>Over the past weekend, I noticed that my blog is not available since azure has disabled hosting of my WordPress blog. It happened because I ran out of my free credits for the current month. I started looking for alternate options for hosting WordPress. That&rsquo;s when I came across (<a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">Static Generator is All a Blog Needs - Moving to Octopress</a>). I decided to give it a try.</p>

<p>Below are the main steps which I followed for migrating to Octopress</p>

<h1>Documentation</h1>

<ul>
<li>Read documentation of Octopress <a href="http://octopress.org/docs/">here</a> and Jekyll <a href="https://jekyllrb.com/docs/home/">here</a></li>
</ul>


<h1>Setup</h1>

<ul>
<li>Install Chocolatey as mentioned in documentation <a href="https://chocolatey.org/install">here</a>
Below command can be run on cmd.exe open as administrator</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>As mentioned in octopress documentation, ensure Git, ruby and devkit are installed. Cholocatey way of installation can be found in <a href="https://chocolatey.org/packages/git.install">git</a>, <a href="https://chocolatey.org/packages/ruby">ruby</a> , <a href="https://chocolatey.org/packages/ruby2.devkit">devkit</a>.
Below commands can be run on cmd.exe</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install git.install
</span><span class='line'>choco install ruby
</span><span class='line'>choco install ruby2.devkit</span></code></pre></td></tr></table></div></figure>


<ul>
<li>By default, devkit is installed in <code>C:\tools\</code>. Move in <code>devkit</code> folder and run below commands</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install
</span><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<h1>Install Octopress</h1>

<ul>
<li>Now install Octopress as per <a href="http://octopress.org/docs/setup/">documentation</a></li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install // Install default Octopress theme</span></code></pre></td></tr></table></div></figure>


<h1>Install Octostrap3 theme &amp; Customize</h1>

<ul>
<li>Since I didn&rsquo;t like the default theme much, I installed Octostrap3 theme as mentioned <a href="http://kaworu.github.io/octostrap3/setup/install/">here</a></li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/kAworu/octostrap3.git .themes/octostrap3
</span><span class='line'>rake "install[octostrap3]"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Fix up all issues. The date displayed as &ldquo;Ordinal&rdquo; can be fixed by updating <code>_config.yml</code> file as mentioned in their blog. Below is the config which I used</li>
</ul>


<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date_format: "%e %b, %Y"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>I made few more changes for changing the navigation header color, color of code blocks and also to include a side bar with categories. The changes are as below</li>
</ul>


<p>Changing color of code blocks is done by commenting below line in <code>octopress\sass\custom\_colors.scss</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\$solarized: light;</span></code></pre></td></tr></table></div></figure>


<p>Navigation header color is changed by adding below to <code>octopress\sass\custom\_styles.scss</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.navbar-default {
</span><span class='line'>    background-image: -webkit-gradient(linear,left top,left bottom,from(#263347),to(#263347));
</span><span class='line'>}
</span><span class='line'>.navbar-default .navbar-brand {
</span><span class='line'>    color: #fff;
</span><span class='line'>}
</span><span class='line'>.navbar-default .navbar-nav&gt;li&gt;a {
</span><span class='line'>    color: #fff;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Adding category side bar is done by following steps mentioned in <a href="https://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/">Category List Aside</a></p>

<h1>Google Analytics Integration</h1>

<p>Next step was google analytics integration. Detailed steps for this is available on various blogs. Below is what I followed</p>

<ul>
<li>Sign up for google analytics ID in <a href="https://analytics.google.com/analytics/web/provision?authuser=0#provision/SignUp/">here</a></li>
<li>Update _config.yml with google analytics ID</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Google Analytics
</span><span class='line'>google_analytics_tracking_id: UA-XXXXXXXX-1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update <code>google_analytics.html</code> file with below</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   &lt;script&gt;
</span><span class='line'>    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
</span><span class='line'>    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
</span><span class='line'>    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
</span><span class='line'>    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
</span><span class='line'>
</span><span class='line'>    ga('create', 'UA-XXXXXXXX-1', 'auto');
</span><span class='line'>    ga('send', 'pageview');
</span><span class='line'>
</span><span class='line'>  &lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UA-XXXXXXXX-1 can be replaced with <code>site.google_analytics_tracking_id</code> enclosed in double braces/curly brackets</li>
<li>Log in to Google Analytics site and navigate to Admin >> View >> Filters</li>
<li>Add a new filter to exclude all traffice to hostname &ldquo;localhost&rdquo;. This will help to exclude all site visit done for development/ preview purpose.</li>
</ul>


<h1>Sample Post</h1>

<ul>
<li>Now create a Hello World post and check how it look</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["Hello World"]
</span><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>rake preview mounts a webserver at <a href="http://localhost:4000" title="http://localhost:4000">http://localhost:4000</a>. By opening a browser window and navigating to <a href="http://localhost:4000" title="http://localhost:4000">http://localhost:4000</a> will preview the Hello World Post</p>

<h1>Deploying to GitHub Pages</h1>

<p>Detailed instructions can be found in <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a>. Below are high-level steps copied from there
- Create a GitHub repository with name <code>yourusername.github.io</code>
- Run below command. It will prompt for GitHub URL, which needs to be filled in</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages // This does all configurations
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now we can commit the source</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h1>Custom Domain</h1>

<ul>
<li>Create a file named <code>CNAME</code> in blog source</li>
<li>Update it with custom domain name. It has to be a sub domain (www.examplesubdomain.com)</li>
<li>Update the CNAME dns setting in your domain provider to point to <code>https://username.github.io</code></li>
<li>If top-level domains (exampletopdomain.com) are needed, then configure A record to point to IP address <code>192.30.252.153</code> or <code>192.30.252.154</code>.</li>
</ul>


<h1>Migrating Old blog Post from word press</h1>

<p>After completing above steps,  a new octopress blog is ready to go . Below are the steps which I followed to migrate old blog posts from word press.</p>

<ul>
<li>Clone <a href="https://github.com/thomasf/exitwp">Exitwp</a></li>
<li><p>Follow the steps mentioned in readme.md.</p>

<ul>
<li>Export old wordpress blog using WordPress exporter in tools/export in WordPress admin</li>
<li>Copy xml file to wordpress-xml directory</li>
<li>Run  python exitwp.py in the console from the same directory of unzipped archive</li>
<li>All blogs will be created as separate directory under <code>build</code> directory</li>
<li>Copy relevant folders to source folder of the blog</li>
</ul>
</li>
<li><p>Find broken redirection links and fix</p>

<ul>
<li>The redirection links are now changed to something like <code>{site.root}blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/</code></li>
</ul>
</li>
<li>Find broken image links and fix

<ul>
<li>Inorder to make it easier for migrating to another platform later, I created a new config value in <code>_config.yml</code> as below .
<code>
  images_dir: /images
</code></li>
<li>The image links are not pointing to <code>{site.images_dir}/2017/04/27/Mountebank_XML_Response_Folder-Tree.jpg</code></li>
</ul>
</li>
</ul>


<h1>SEO Optimisation in Octopress</h1>

<ul>
<li>In rake file, add below two lines   <code>post.puts "keywords: "</code> and <code>post.puts "description: "</code></li>
<li>Final content will look like below</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post.puts "---"
</span><span class='line'>post.puts "layout: post"
</span><span class='line'>post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
</span><span class='line'>post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}"
</span><span class='line'>post.puts "comments: true"
</span><span class='line'>post.puts "categories: "
</span><span class='line'>post.puts "keywords: "
</span><span class='line'>post.puts "description: "
</span><span class='line'>post.puts "---"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add relevant Keyword and description to all pages</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powershell - Remove Entire Directory and It's Content]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/05/02/powershell-remove-entire-directory-and-its-content/"/>
    <updated>2017-05-02T06:27:27+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/05/02/powershell-remove-entire-directory-and-its-content</id>
    <content type="html"><![CDATA[<p>The PowerShell command to remove an entire directory and its contents ( including sub folders and files) is below</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -Rf pathToDirectoryToBeRemoved/</span></code></pre></td></tr></table></div></figure>


<p>R flag denotes to run “rm” command recursively . “f” flag denotes to run in forcefully. We can even replace “f” with “v” for verbose mode and “i” for interactive mode.</p>

<p>Note: Above command can also be used to delete files which have long path ( more than 260 characters)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing XML Responses Using Mountebank]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/27/stubbing-xml-responses-using-mountebank/"/>
    <updated>2017-04-27T05:55:51+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/27/stubbing-xml-responses-using-mountebank</id>
    <content type="html"><![CDATA[<p>Previous two blog post talked about how we can use mountebank for stubbing where responses are in json format . They can be accessed (<a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">here</a>) and (<a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2/">here</a>). We can use same approach for stubbing SOAP services using XML as well. In this post, I will explain how we can provide XML response using Mountebank .</p>

<p>Let us have a quick look into the files created. Before we begin, folder structure of various file as below</p>

<p><img src="http://www.abygeorgea.com/images/2017/04/27/Mountebank_XML_Response_Folder-Tree.jpg" alt="folderstructure" /></p>

<h4>Imposter.ejs</h4>

<p>The main Imposter file is</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>&lt;% include Port4547.json %&gt;
</span><span class='line'>]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Port4547.json</h4>

<p>This file specifies which port number to use and what all stubs needs to be created is as below</p>

<figure class='code'><figcaption><span>Port4547.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>{
</span><span class='line'>&lt;% include XMLStubGET.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include XMLStubPOST.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>XMLStubGET.json</h4>

<p>This is the first stub for this example and it looks for any request coming with the method &ldquo;GET&rdquo; and path &ldquo;/Blog.Api/[0-9]+/CustomerView&rdquo; , where [0-9]+ is regular expression of any numeric</p>

<figure class='code'><figcaption><span>XMLStubGET.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetXMLStub.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"method" : "GET",
</span><span class='line'>"path" : "/Blog.Api/[0-9]+/CustomerView"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h4>XMLStubPOST.json</h4>

<p>This is the second stub for this example and it looks for any request coming with method &ldquo;POST&rdquo; and path &ldquo;/Blog.Api/XMLexamplePOST/[0-9]+&rdquo; , where [0-9]+ is regular expression of any numeric .It also needs a body as <Action>Insert</Action><Record>Customer1</Record></p>

<p>Note: If you have body in multi-line, then make sure to enter &ldquo;\n&rdquo; for new line</p>

<figure class='code'><figcaption><span>XMLStubPOST.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetXMLStub-POST.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"body" : "&lt;Action&gt;Insert&lt;/Action&gt;&lt;Record&gt;Customer1&lt;/Record&gt;",
</span><span class='line'>"method" : "POST",
</span><span class='line'>"path" : "/Blog.Api/XMLexamplePOST/[0-9]+"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h4>GetXMLStub.js</h4>

<p>Below js file create a response based on template mentioned and return the response with proper status. Please note that, we are not using &ldquo;Json.Parse&rdquo; here as we did for previous examples involving json.</p>

<figure class='code'><figcaption><span>GetXMLStub.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>response = "&lt;%- stringify(filename, 'StubTemplate\\CustomerDetails.xml') %&gt;"
</span><span class='line'>return {
</span><span class='line'>statusCode : 200,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/xml; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>GetXMLStub-POST.js</h4>

<figure class='code'><figcaption><span>GetXMLStub-POST.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>response = "&lt;%- stringify(filename, 'StubTemplate\\RecordAdded.xml') %&gt;"
</span><span class='line'>return {
</span><span class='line'>statusCode : 200,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/xml; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>CustomerDetails.XML</h4>

<p>This is the template for the first stub - GET example</p>

<figure class='code'><figcaption><span>XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;customer&gt;
</span><span class='line'>  &lt;FirstName&gt;John&lt;/FirstName&gt;
</span><span class='line'>  &lt;LastName&gt;Citizen&lt;/LastName&gt;
</span><span class='line'>  &lt;Address&gt;Some St, Some State, Some Country&lt;/Address&gt;
</span><span class='line'>  &lt;Email&gt;Test@test.com&lt;/Email&gt;
</span><span class='line'>&lt;/customer&gt;</span></code></pre></td></tr></table></div></figure>


<h4>RecordAdded.xml</h4>

<p>This is the template for the second stub - POST example</p>

<figure class='code'><figcaption><span>XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Status&gt;Added&lt;/Status&gt;
</span><span class='line'>&lt;Record&gt;Customer1&lt;/Record&gt;</span></code></pre></td></tr></table></div></figure>


<p>After creating above files and keeping them as per directory structure is shown above, it is time to start mountebank</p>

<blockquote><p>mb &ndash;configfile SOAP-XMLStubExample/Imposter.ejs &ndash;allowInjection</p></blockquote>

<p>Note: Give the right path to Imposter.ejs . If you need to debug Mountebank, you can use below command at the end &ldquo; &ndash;loglevel debug&rdquo;</p>

<p>Now trigger a get request to <a href="http://localhost:4547/Blog.Api/3123/CustomerView.">http://localhost:4547/Blog.Api/3123/CustomerView.</a></p>

<p>This should match with our first predicate and should return the response mentioned</p>

<p>Mountebank_XML_Response_</p>

<p>Now trigger a POST request with a body . If predicates are matched, then it will respond with expected response as below</p>

<p><img src="http://www.abygeorgea.com/images/2017/04/27/Mountebank_XML_Response_PostmanRequest1.png" alt="PostManRequest" /></p>

<p>In Nut shell, creating a XML response is similar to creating json response. There are only minor differences in the js file which creates the response. The main difference is the omission of Json.Parse and also changing the response headers.</p>

<p>Above examples can be cloned from my GitHub repository <a href="https://github.com/abygeorgea/MountebankExamples">here</a>. After cloning the repository to local, just run RunMounteBankStubsWithSOAPXMLStubExampleData.bat file. Postman scripts can also be found inside PostmanCollections Folder to testing this</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zip and Extract Zip Files Using Csharp]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/20/zip-and-extract-zip-files-using-csharp/"/>
    <updated>2017-04-20T21:59:02+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/20/zip-and-extract-zip-files-using-csharp</id>
    <content type="html"><![CDATA[<p>On corporate world, most of the times, the access required for installing applications and connecting to internet will be limited. There can be scenarios where access to install Mountebank using npm will not be available. In those circumstances, we can just unzip the zip file downloaded from self contained archive links in <a href="http://www.mbtest.org/docs/install">mbtest.org</a></p>

<p>Below code snippet can be used for extracting the zip files on the fly , so that it can be used for running test cases on any machine.</p>

<h3>Pre-Requisite</h3>

<ul>
<li>.Net 4.5 is needed</li>
<li>Add reference to below dll to solution

<ul>
<li>System.IO.Compression.dll</li>
<li>System.IO.Compression.FileSystem.dll</li>
</ul>
</li>
</ul>


<h3>Example</h3>

<p>Below example is based on (copied from) <a href="https://msdn.microsoft.com/en-us/library/hh485723(v=vs.110">msdn</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>    <span class="n">Public</span> <span class="k">void</span> <span class="nf">ZipFile</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">startPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\start&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">zipPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\result.zip&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">extractPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\extract&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ZipFile</span><span class="p">.</span><span class="n">CreateFromDirectory</span><span class="p">(</span><span class="n">startPath</span><span class="p">,</span> <span class="n">zipPath</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Public</span> <span class="k">void</span> <span class="nf">UnZipFile</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">startPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\start&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">zipPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\result.zip&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">extractPath</span> <span class="p">=</span> <span class="s">@&quot;c:\example\extract&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ZipFile</span><span class="p">.</span><span class="n">ExtractToDirectory</span><span class="p">(</span><span class="n">zipPath</span><span class="p">,</span> <span class="n">extractPath</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Creating a Response Based on a File Template and Modifying It Based on Request - PART 2]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/06/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2/"/>
    <updated>2017-04-06T20:24:20+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/06/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2</id>
    <content type="html"><![CDATA[<p>This is an extension to my previous blog about how we can use mountebank to create a stubbed response based on a template file . You can read about it <a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">here</a>.  In this step by step example, I will explain how we will use mountebank to modify the response based on the request . Before we start, please ensure you are familiar with <a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">Part1 </a>of the excercise. If you need to know more about mountebank and how to use mountebank , please read through <a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">how to install mountebank </a> and <a href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/">service virtualisation using mountebank</a>.</p>

<p>As in previous example, let us create Imposter.ejs and 4547.json . Contents of the Imposter.ejs is as below</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'> "imposters": [
</span><span class='line'>
</span><span class='line'> &lt;% include 4547.json %&gt;
</span><span class='line'>
</span><span class='line'> ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Contents of 4547.json is as below</p>

<p><strong>4547.json</strong></p>

<figure class='code'><figcaption><span>4547.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'> "port": 4547,
</span><span class='line'> "protocol": "http",
</span><span class='line'> "stubs": [
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'> &lt;% include  CustomerNotFound.json %&gt;
</span><span class='line'> },
</span><span class='line'> {
</span><span class='line'>  &lt;% include  CustomerFound.json %&gt;
</span><span class='line'> }
</span><span class='line'> ]
</span><span class='line'> }
</span></code></pre></td></tr></table></div></figure>


<p>Now create CustomerFound.json</p>

<figure class='code'><figcaption><span>CustomerFound.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> "responses": [
</span><span class='line'> {
</span><span class='line'> "inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetCustomerFound.js') %&gt;"
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "matches": {
</span><span class='line'> "method" : "GET",
</span><span class='line'> "path" : "/Blog.Api/[0-9]+/CustomerView"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]
</span></code></pre></td></tr></table></div></figure>


<p>As we can see from above, if there is request which matches the predicates , then response will be dictated by the GetCustomerFound javascript file kept inside directory ResponseInjection. Predicate used here is a GET request which have a matching path of /Blog.Api/[0-9]+/CustomerView.</p>

<p>Contents of GetCustomerFound.js is</p>

<figure class='code'><figcaption><span>GetCustomerFound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>
</span><span class='line'>response = JSON.parse("&lt;%- stringify(filename, 'StubTemplate\\CustomerFoundView.json') %&gt;");
</span><span class='line'> var ext =require('../../../StubResponse/ResponseInjection/extractrequest');
</span><span class='line'>
</span><span class='line'>var reqdata = ext.extractor(request);
</span><span class='line'>
</span><span class='line'> response.data.customerID=reqdata.CustomerID;
</span><span class='line'>
</span><span class='line'> return {
</span><span class='line'> statusCode : 200,
</span><span class='line'> headers: {
</span><span class='line'> 'Content-Type': 'application/json; charset=utf-8'
</span><span class='line'> },
</span><span class='line'> body: response
</span><span class='line'>
</span><span class='line'> };
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>The javascript file have a single function , which reads the stubbed response kept in template file . Then it calls another Javascript function to called &ldquo;extractrequest&rdquo;. We will see the details of it soon. For now, it actually returns the customer number from the request . For eg, if request is &ldquo;<a href="http://localhost:4547/Blog.Api/3123/CustomerView">http://localhost:4547/Blog.Api/3123/CustomerView</a> &rdquo; then it return 3123 as customer ID. Once we extract the customer ID, then it will replace the customer ID in our template response with the value coming from request and return the response.</p>

<p>Let us take a close look at the extractrequest function.</p>

<figure class='code'><figcaption><span>extractrequest.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>module.exports = {extractor:function extractCIFAndPackageID (request) {
</span><span class='line'>
</span><span class='line'>if(request && request.path) {
</span><span class='line'>var req = request.path.split('/');
</span><span class='line'>if(req.length &gt;2 && req[1]) {
</span><span class='line'>return { CustomerID: req[2] }
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return null;
</span><span class='line'>}}
</span></code></pre></td></tr></table></div></figure>


<p>This method will take the input parameter as the request and split it at &ldquo;/&rdquo; to get a an array . Then we will return the array[2] which is the customer ID from the request</p>

<p>Finally , the template response</p>

<p><strong>CustomerFoundView.json</strong></p>

<figure class='code'><figcaption><span>CustomerFoundView.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"status": "success",
</span><span class='line'>"code": 0,
</span><span class='line'>"message": "",
</span><span class='line'>"data":
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>"customerID": "123",
</span><span class='line'>"firstName": "John",
</span><span class='line'>"lastName": "Citizen",
</span><span class='line'>"email": "John.Citizen@abcabacas.com"
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us fire up mountebank</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/mountebank.png" alt="mountebank" /></p>

<p>Make few request using postman, which have different request parameter</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customerfound1.png" alt="customerFound1" /></p>

<p>Another request</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customerfound2.png" alt="CustomerFound2" /></p>

<p>In above two examples,we  can see the CustomerID field is response is updated with number extracted from request.</p>

<p>Now let us try another example , where request is <a href="http://localhost:4547/Blog.Api/1234542323/CustomerView">http://localhost:4547/Blog.Api/1234542323/CustomerView</a></p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customernotfound2.png" alt="CustomerNotFound2" /></p>

<p>As you can see, we are getting a customer Not found response. This is due to the order of predicates we use. In our 4547.json, the order of response are as below.</p>

<ol>
<li><p> Customer Not found which has a predicate of &ldquo;/Blog.Api/1[0-9]+/CustomerView&rdquo;</p></li>
<li><p>Customer found which has a predicate of &ldquo;/Blog.Api/[0-9]+/CustomerView&rdquo;</p></li>
</ol>


<p>As you can see from above order, when a request comes through , mountebank will first match with predicate of first response and if it matches, it returns the response. If not, mountebank will keep trying with next one followed by all others. In this particular example, since our request have a customer ID of 1234542323, it matches with regular expression of first one ( 1[0-9]+)  and hence it return customer not found response.</p>

<p>In next blog post, I will provide more insights about how to extract request from different type of requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Creating a Response Based on a File Template and Modifying It Based on Request - PART 1]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/06/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/"/>
    <updated>2017-04-06T19:43:44+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/06/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1</id>
    <content type="html"><![CDATA[<p>In the previous two blog post, I have explained about how to setup mountebank (<a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">here</a>) and how to create a virtualised respone(<a href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/">here</a>) . Now coming to more detailed use cases which we might encounter in daily life. In this blog post, I will explain how we can use mountebank to create a virtualised response based on a template response stored in a file and modifying certain fields in response based on the request coming through.</p>

<p>In below Step by Step example , I will have two mock responses for searching for a customer details. First response is when customer is not available in back end systems and second response is when customer details are found.</p>

<p>Before we start, below is folder structure which I have and in this blog post we are discussing about only one stubbed response, which is the NOT FOUND scenario.</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/folderstructure.png" alt="folderstructure" /></p>

<p>Let us first create the imposter.ejs file</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>
</span><span class='line'>&lt;% include 4547.json %&gt;
</span><span class='line'>
</span><span class='line'>]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us create the file which specifies the port number where it should run and order of responses. Below code tells mountebank that port which it needs to listen for incoming request is 4547 and protocol is http. There are two set of mock responses planned.</p>

<figure class='code'><figcaption><span>4545</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>&lt;% include CustomerNotFound.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include CustomerFound.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<p>In this example, let us look at first mock response.</p>

<figure class='code'><figcaption><span>CustomerNotFOund.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%- stringify(filename, 'ResponseInjection\\GetCustomerNotFound.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"method" : "GET",
</span><span class='line'>"path" : "/Blog.Api/1[0-9]+/CustomerView"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>From above response, we can infer below. When ever an http GET request come to port 4547 , with a path matching &ldquo;/Blog.Api/1[0-9]+/CustomerView', then we will call the Javascript function "GetCustomerNotFound.js&rdquo; which is kept inside a directory &ldquo;ResponseInjection&rdquo; in same location. It is also good to notice that , predicate is a regular expression ( hence use matches) and all request where 1 followed by any number of numeric will be returned with this response</p>

<p>The javascript function listed here is responsible for reading the sample template response and sending it back .</p>

<figure class='code'><figcaption><span>GetCustomerNotFound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>
</span><span class='line'>response = JSON.parse("&lt;%- stringify(filename, 'StubTemplate\\CustomerNotFoundView.json') %&gt;");
</span><span class='line'>
</span><span class='line'>return {
</span><span class='line'>statusCode : 404,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/json; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Above function reads a json response kept inside directory &ldquo;StubTemplate&rdquo; and convert it to json and return to mountebank. Since this is for a scenario where customer records are not found,we set the status code as 404. We can also set the headers if needed</p>

<p>The stub template is as below</p>

<figure class='code'><figcaption><span>CustomerNotFoundView.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"status": "fail",
</span><span class='line'>"code": "CUSTOMER_NOT_FOUND",
</span><span class='line'>"message": "Customer details not found."
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us run mountebank</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/mountebank.png" alt="mountebank" /></p>

<p>Request through postman</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/notfound.png" alt="notfound.png" /></p>

<p>As you can see , the GET request matching with predicate is returning the stubbed response with status 404.</p>

<p>For real time usage for testing any web application which needs to get a 404 message from back end API calls, just point the end point to this local host end point and fire a request which matches the predicate.</p>

<p>Details of second response will be shared in next blog post</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Your First Service Virtualisation]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/"/>
    <updated>2017-03-03T11:46:48+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation</id>
    <content type="html"><![CDATA[<p>In current development world, there will be scenarios were both API and its consumers are developed in parallel. Inorder to decouple their dependencies, we can mock an api response using mountebank. In this example, I will explain how to get started with your first service virtualisation using mountebank. After installing mountebank as mentioned in <a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">here (Install Mountebank)</a>, we will proceed with configuring mountebank. It can be done in few ways. The method which I explain below is by using file based configuration. This involve setting up an imposter file and a stub response</p>

<h2>How to Create a Stub</h2>

<ol>
<li><p>Navigate to mountebank installation path</p></li>
<li><p>Create a folder and name it as &ldquo;StubResponse&rdquo;. ( You can name it whatever you want)</p></li>
<li><p>Create two json file using notepad and save it as &ldquo;MockResponeForApiOne.json&rdquo; and &ldquo;MockResponeForApiTwo.json&rdquo;( Or what ever you want).</p></li>
<li><p>Copy paste below code to &ldquo;MockResponeForApiOne.json&rdquo; . Sample example only. Update the response and predicates to suite your need ( if required)</p></li>
</ol>


<figure class='code'><figcaption><span>MockResponseForApiOne.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>"responses": [
</span><span class='line'> {
</span><span class='line'> "is": {
</span><span class='line'> "statusCode": 200,
</span><span class='line'> "body": {
</span><span class='line'> "Text":"Response ONE ","token":"username","expires_in":90
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "exists": {
</span><span class='line'> "body" :
</span><span class='line'> {
</span><span class='line'> "username": true,"password" : true
</span><span class='line'> },
</span><span class='line'> "method" : "POST",
</span><span class='line'> "path" : "/Apitesting/v1/test?type=ResponseOne"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]</span></code></pre></td></tr></table></div></figure>


<p>-</p>

<ol>
<li>Copy paste below code to &ldquo;MockResponeForApiTwo.json&rdquo; . Sample example only. Update the response and predicates to suite your need ( if required)</li>
</ol>


<figure class='code'><figcaption><span>MockResponseForApiTwo.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> "responses": [
</span><span class='line'> {
</span><span class='line'> "is": {
</span><span class='line'> "statusCode": 200,
</span><span class='line'> "body": {
</span><span class='line'> "Text":"Response TWO ","token":"emailAddress","expires_in":90
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "exists": {
</span><span class='line'> "body" :
</span><span class='line'> {
</span><span class='line'> "email": true,"password" : true
</span><span class='line'> },
</span><span class='line'> "method" : "POST",
</span><span class='line'> "path" : "/Apitesting/v1/test?type=ResponseTwo"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]</span></code></pre></td></tr></table></div></figure>


<h2>How to create an Imposter</h2>

<ol>
<li><p>Create another file called test.json in same path as above</p></li>
<li><p>copy and paste below contents to it</p></li>
</ol>


<figure class='code'><figcaption><span>test.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>{
</span><span class='line'>&lt;% include MockResponseForApiOne.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include MockResponseForApiTwo.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Let us have a close look into Imposter and stubs</h2>

<p>Responses – Contains an array of responses expected to return for the defined stub. In the above scenario the response will include status code as 200 and response body. For more info, <a href="http://www.mbtest.org/docs/api/contracts">http://www.mbtest.org/docs/api/contracts</a>
Predicates – is an array of predicates which will be used during matching process. Predicate object can be quite complex, it supports lots of different matching techniques.
For more info, <a href="http://www.mbtest.org/docs/api/predicates">http://www.mbtest.org/docs/api/predicates</a></p>

<h2>Let&rsquo;s Mock it</h2>

<p>Once all required files are created and saved, mountebank can be started by following command in command prompt , after navigating to installation folder of mountebank</p>

<figure class='code'><figcaption><span>test.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>mb --configfile StubResponse/test.json
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/cmd.jpg" alt="cmd.jpg" /></p>

<p>Once mountebank is started, we can verify it by navigating to path <a href="http://localhost:2525/imposters">http://localhost:2525/imposters</a></p>

<p>It will list out all active ports and a list of stubs available</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/imposter.jpg" alt="imposter" /></p>

<h2>Test It</h2>

<p>Once we complete above steps, mountebank is ready with stubs. Now comes the part to test it and use. You can use any api testing tool ( Postman, soapUi etc ) for testing this. Just send the request matching the predicates and look for the responses</p>

<p>Below are the screenshot of Postman request</p>

<p><strong>Requesting for First API.</strong></p>

<p>Predicate of response One says that , request has to be of type POST, body of request should have &ldquo;username&rdquo; and &ldquo;password&rdquo; . Path of the request should have /Apitesting/v1/test?type=ResponseOne"</p>

<p>Now construct a postman request matching above and fire it</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/bgone.jpg" alt="bgone" /></p>

<p><strong>Request for second API</strong></p>

<p>Predicate of response One says that , request has to be of type POST, body of request should have &ldquo;<strong>email</strong>&rdquo; and &ldquo;password&rdquo; . Path of the request should have /Apitesting/v1/test?type=Response<strong>Two</strong>"</p>

<p>Now construct a postman request matching above and fire it</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/bgtwo.jpg" alt="bgtwo" /></p>

<p>As you can see, both request has succesfully received expected response message</p>

<p>For actual development usage, just point your application to this localhost URL and start consuming virtualised API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Virtualisation Using Mountebank]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/"/>
    <updated>2017-02-13T11:13:58+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank</id>
    <content type="html"><![CDATA[<h1>What is Mountebank?</h1>

<blockquote>As per mbtest.org "_mountebank is the first open source tool to provide cross-platform, multi-protocol test doubles over the wire. Simply point your application under test to mountebank instead of the real dependency, and test like you would with traditional stubs and mocks_"</blockquote>


<p>In short mountebank is a open source service virtualisation tool . Mountebank uses imposters to act as on demand test doubles. Hence our test cases communicate to Mountebank and mountebank responds back with relevant stubs as defined.</p>

<h1>How to Setup Mountebank ?</h1>

<p>Installation can be done via two methods</p>

<h3>npm</h3>

<p>Mountebank can be installed as a npm package. Node.js should be installed for this option to work</p>

<pre><code>&lt;code&gt;npm install -g mountebank&lt;/code&gt;
</code></pre>

<h3>Self contained Installation file</h3>

<p>OS Specific installation file can be downloaded from <a href="http://www.mbtest.org/docs/install">Download</a></p>

<p>Note: Please read through the windows path limitation mentioned in above link</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Testing- Decoupling Back End Dependency]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/02/12/ui-testing-in-isolation/"/>
    <updated>2017-02-12T07:41:43+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/02/12/ui-testing-in-isolation</id>
    <content type="html"><![CDATA[<p>The traditional approach for automating UI test cases is to create selenium web driver based ( or any UI testing tools) scripts for exercising complete end to end flow. However, it comes with its own challenges. It will have multiple steps as pre-requiste for reaching required UI page and hence it behaves as an E2E integration test rather than UI test.</p>

<p>A typical web application architecture will have one or more front-end application, which will talk to multiple back-end services, API&rsquo;s etc. They will, in turn, talk to other back-end services or to different databases. On High level , architecture looks like below
<img src="http://www.abygeorgea.com/images/2017/02/02/UIinIsolation_1.png" alt="" /></p>

<p> On an enterprise world, all these will be developed and maintained by different teams. All of them will be working in parallel and will push in their code changes ( including occasional broken code) frequently. This will result in breakages since test automation scripts heavily depending on UI and its integration. Even if there is no broken code, a test can still fail due to multiple environmental issues for any of the backend services and other components.  Hence it will become increasingly difficult for achieving a green build.</p>

<p>Hence UI based test cases are less robust due different reasons like</p>

<ol>
<li><p>Test depends on external factors which are outside of our control and not part of scope of testing</p></li>
<li><p>Failing test may not pin point exact location of failure since it is trying to test too many things.</p></li>
<li><p>There are chances that all components will not be ready when we want to test UI. Hence testing it pushed to the end , which will increase cost of fixing defects.</p></li>
<li><p>Re - running of test cases may pass (if failure is caused by environmental issues)</p></li>
<li><p>UI test are brittle by nature since they will even fail  due to timing issues because it is depending on data from back end services.</p></li>
</ol>


<p>The solution for above is to adopt more unit test like structure for UI testing. We should be testing UI in isolation to other back-end services and their dependency. This allows testing as much as possible early in lifecycle without any dependency on other streams. We should replace all backend service calls with stubs</p>

<p><img src="http://www.abygeorgea.com/images/2017/02/02/UIinIsolation_2.png" alt="" /></p>

<p>Mountebank is a tool which we can use for mocking the service calls. As per <a href="http://www.mbtest.org/">mbtest.org</a>, mountebank is the first open source tool to provide cross-platform, multi-protocol test doubles over the wire.  We can use mountebank for stubbing the back-end service calls and there by use it for decoupling UI from unpredictable back end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powershell - Copying Folders and Files]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/10/10/powershell-copying-folders-and-files/"/>
    <updated>2016-10-10T06:47:54+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/10/10/powershell-copying-folders-and-files</id>
    <content type="html"><![CDATA[<p>Two options for copying files are below.</p>

<ul>
<li>Robocopy - More details can be found at <a href="https://technet.microsoft.com/en-us/library/cc733145.aspx">Robocopy</a></li>
<li>Copy_Item cmdlet - More details can be found at <a href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.management/copy-item">Copy-Item</a></li>
</ul>


<h3>Copying Folder structure Only</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'>Copy-Item $source $dest -Filter {PSIsContainer} -Recurse -Force
</span><span class='line'>
</span><span class='line'>#OR
</span><span class='line'>robocopy $source $dest /e /xf *.*
</span><span class='line'>
</span><span class='line'># /e denotes all folder including empty folders. /xf denotes all files except one of format *.*
</span><span class='line'># /e can be replaced with /s for ignoring empty folders</span></code></pre></td></tr></table></div></figure>


<h3>Flattening Folder structure - Copy all files from nested folders to a single folder</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'># Below is required only if we need to create destination folder. Uncomment below line if folder needs to be created
</span><span class='line'>#New-Item $dest -type directory 
</span><span class='line'>
</span><span class='line'>Get-ChildItem $source -Recurse | `
</span><span class='line'>    Where-Object { $_.PSIsContainer -eq $False } | `
</span><span class='line'>    ForEach-Object {Copy-Item -Path $_.Fullname -Destination $dest -Force} </span></code></pre></td></tr></table></div></figure>


<h3>Copy same folder structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'>robocopy $source $dest /e</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - How to Solve Filename Too Long Error]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/23/git-how-to-solve-filename-too-long-error/"/>
    <updated>2016-09-23T06:31:03+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/23/git-how-to-solve-filename-too-long-error</id>
    <content type="html"><![CDATA[<p>Git for windows is normally shipped with long path support disabled due to mysys not supporting file path/name greater than 260 character. While cloning repository with large nested directory structute may cause error &ldquo;file name too long&rdquo;. This can be fixed by below command. It can be executed using powershell or cmd directly in project ( or anywhere if git variable is available)</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --system core.longpaths true</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Take Screenshots With Selenium in C#]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c/"/>
    <updated>2016-09-06T12:00:23+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c</id>
    <content type="html"><![CDATA[<p>Very frequently testers will meet a situation where they need to take screenshot of webpage they are testing , either for base line or as a proof of test result. This is same with automated testing . Even though automated test cases have their own of way of publishing test results, it is always desirable to keep a proof of result.. Screenshot come to help in this regards. In this blog post , I will explain , how to take a screenshot with Selenium Web Driver with C#. In future I will add another couple of post to explain , how to consolidate the screenshots into a PDF document.</p>

<p>In .NET binding, we have an interface called ITakesScreenshot , which helps to capture screenshot of active window. Below code will help to take screenshot and save it in the path specified while calling the function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>// PathToFolder is the location where we need to save the screenshot
</span><span class='line'>// FileName is another string where PathToFolder is appended with timestamp
</span><span class='line'>public void TakeScreenShot(string PathToFolder)
</span><span class='line'>{
</span><span class='line'>  string fileName = PathToFolder + DateTime.Now.ToString("HHmmss") +".jpeg";
</span><span class='line'>  Screenshot cp = ((ITakesScreenshot)driver).GetScreenshot();
</span><span class='line'>  cp.SaveAsFile(fileName, System.Drawing.Imaging.ImageFormat.Jpeg);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
