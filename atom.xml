<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aby George A]]></title>
  <link href="http://www.abygeorgea.com/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2017-06-19T20:15:55+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Squash Commits in Git]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/15/how-to-squash-commits-in-git/"/>
    <updated>2017-06-15T05:46:39+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/15/how-to-squash-commits-in-git</id>
    <content type="html"><![CDATA[<p>Very often we will be committing smaller pieces of work in our local machine as we go. However before we push them to a centralized repository, we may have to combine these small commits to single large commit, which makes sense for rest of the team. I will explain how this can be achieved by using interactive rebasing.</p>

<p>To start with, let us assume the initial commits history look like below. It have 4 minor commits done to the same file.
<img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image1.png" alt="Initial Commit Structure" /></p>

<p>Now we need to squash last for commits into a single commit. The command required for that is as below. This tells git to rebase head with previous 4 commits in an interactive mode.</p>

<pre><code>    $ git rebase -i HEAD~4
</code></pre>

<p>This will pop up another editor with details of last 4 commits and some description about possible actions on this. Initially, all of them will have a default value of PICK. Since we are trying to squash commits together, we can select one of the commits as PICK and rest all needs to be changed as SQUASH. Save and close the editor once all changes are made.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image2.png" alt="Interactive Rebasing" /></p>

<p>After this, another popup will appear with comments given for each of the commits. We can comment out unnecessary comments by using <code>#</code> and also modify required comments as we need. In below screen, I have modified comments for the first commit and commented out rest all. Save and close the editor once all changes are made.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image3.png" alt="Selecting comments" /></p>

<p>Now Git will continue rebasing and it will squash all commits as selected in the previous step.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image4.png" alt="Git rebase" /></p>

<p>If we look at commit history, we can see that commits are now squashed to single commit.</p>

<p><img src="http://www.abygeorgea.com/images/2017/06/15/HowToSquashCommits_image5.png" alt="Squashed Result" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Octopress]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/05/20/migrating-to-octopress/"/>
    <updated>2017-05-20T05:57:24+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/05/20/migrating-to-octopress</id>
    <content type="html"><![CDATA[<p>Over the past weekend, I noticed that my blog is not available since azure has disabled hosting of my WordPress blog. It happened because I ran out of my free credits for the current month. I started looking for alternate options for hosting WordPress. That&rsquo;s when I came across (<a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">Static Generator is All a Blog Needs - Moving to Octopress</a>). I decided to give it a try.</p>

<p>Below are the main steps which I followed for migrating to Octopress</p>

<h1>Documentation</h1>

<ul>
<li>Read documentation of Octopress <a href="http://octopress.org/docs/">here</a> and Jekyll <a href="https://jekyllrb.com/docs/home/">here</a></li>
</ul>


<h1>Setup</h1>

<ul>
<li>Install Chocolatey as mentioned in documentation <a href="https://chocolatey.org/install">here</a>
Below command can be run on cmd.exe open as administrator</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>As mentioned in octopress documentation, ensure Git, ruby and devkit are installed. Cholocatey way of installation can be found in <a href="https://chocolatey.org/packages/git.install">git</a>, <a href="https://chocolatey.org/packages/ruby">ruby</a> , <a href="https://chocolatey.org/packages/ruby2.devkit">devkit</a>.
Below commands can be run on cmd.exe</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install git.install
</span><span class='line'>choco install ruby
</span><span class='line'>choco install ruby2.devkit</span></code></pre></td></tr></table></div></figure>


<ul>
<li>By default, devkit is installed in <code>C:\tools\</code>. Move in <code>devkit</code> folder and run below commands</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install
</span><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<h1>Install Octopress</h1>

<ul>
<li>Now install Octopress as per <a href="http://octopress.org/docs/setup/">documentation</a></li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install // Install default Octopress theme</span></code></pre></td></tr></table></div></figure>


<h1>Install Octostrap3 theme &amp; Customize</h1>

<ul>
<li>Since I didn&rsquo;t like the default theme much, I installed Octostrap3 theme as mentioned <a href="http://kaworu.github.io/octostrap3/setup/install/">here</a></li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/kAworu/octostrap3.git .themes/octostrap3
</span><span class='line'>rake "install[octostrap3]"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Fix up all issues. The date displayed as &ldquo;Ordinal&rdquo; can be fixed by updating <code>_config.yml</code> file as mentioned in their blog. Below is the config which I used</li>
</ul>


<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date_format: "%e %b, %Y"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>I made few more changes for changing the navigation header color, color of code blocks and also to include a side bar with categories. The changes are as below</li>
</ul>


<p>Changing color of code blocks is done by commenting below line in <code>octopress\sass\custom\_colors.scss</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\$solarized: light;</span></code></pre></td></tr></table></div></figure>


<p>Navigation header color is changed by adding below to <code>octopress\sass\custom\_styles.scss</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.navbar-default {
</span><span class='line'>    background-image: -webkit-gradient(linear,left top,left bottom,from(#263347),to(#263347));
</span><span class='line'>}
</span><span class='line'>.navbar-default .navbar-brand {
</span><span class='line'>    color: #fff;
</span><span class='line'>}
</span><span class='line'>.navbar-default .navbar-nav&gt;li&gt;a {
</span><span class='line'>    color: #fff;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Adding category side bar is done by following steps mentioned in <a href="https://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/">Category List Aside</a></p>

<h1>Google Analytics Integration</h1>

<p>Next step was google analytics integration. Detailed steps for this is available on various blogs. Below is what I followed</p>

<ul>
<li>Sign up for google analytics ID in <a href="https://analytics.google.com/analytics/web/provision?authuser=0#provision/SignUp/">here</a></li>
<li>Update _config.yml with google analytics ID</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Google Analytics
</span><span class='line'>google_analytics_tracking_id: UA-XXXXXXXX-1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update <code>google_analytics.html</code> file with below</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   &lt;script&gt;
</span><span class='line'>    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
</span><span class='line'>    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
</span><span class='line'>    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
</span><span class='line'>    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
</span><span class='line'>
</span><span class='line'>    ga('create', 'UA-XXXXXXXX-1', 'auto');
</span><span class='line'>    ga('send', 'pageview');
</span><span class='line'>
</span><span class='line'>  &lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UA-XXXXXXXX-1 can be replaced with <code>site.google_analytics_tracking_id</code> enclosed in double braces/curly brackets</li>
<li>Log in to Google Analytics site and navigate to Admin >> View >> Filters</li>
<li>Add a new filter to exclude all traffice to hostname &ldquo;localhost&rdquo;. This will help to exclude all site visit done for development/ preview purpose.</li>
</ul>


<h1>Sample Post</h1>

<ul>
<li>Now create a Hello World post and check how it look</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["Hello World"]
</span><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>rake preview mounts a webserver at <a href="http://localhost:4000" title="http://localhost:4000">http://localhost:4000</a>. By opening a browser window and navigating to <a href="http://localhost:4000" title="http://localhost:4000">http://localhost:4000</a> will preview the Hello World Post</p>

<h1>Deploying to GitHub Pages</h1>

<p>Detailed instructions can be found in <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a>. Below are high-level steps copied from there
- Create a GitHub repository with name <code>yourusername.github.io</code>
- Run below command. It will prompt for GitHub URL, which needs to be filled in</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages // This does all configurations
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now we can commit the source</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h1>Custom Domain</h1>

<ul>
<li>Create a file named <code>CNAME</code> in blog source</li>
<li>Update it with custom domain name. It has to be a sub domain (www.examplesubdomain.com)</li>
<li>Update the CNAME dns setting in your domain provider to point to <code>https://username.github.io</code></li>
<li>If top-level domains (exampletopdomain.com) are needed, then configure A record to point to IP address <code>192.30.252.153</code> or <code>192.30.252.154</code>.</li>
</ul>


<h1>Migrating Old blog Post from word press</h1>

<p>After completing above steps,  a new octopress blog is ready to go . Below are the steps which I followed to migrate old blog posts from word press.</p>

<ul>
<li>Clone <a href="https://github.com/thomasf/exitwp">Exitwp</a></li>
<li><p>Follow the steps mentioned in readme.md.</p>

<ul>
<li>Export old wordpress blog using WordPress exporter in tools/export in WordPress admin</li>
<li>Copy xml file to wordpress-xml directory</li>
<li>Run  python exitwp.py in the console from the same directory of unzipped archive</li>
<li>All blogs will be created as separate directory under <code>build</code> directory</li>
<li>Copy relevant folders to source folder of the blog</li>
</ul>
</li>
<li><p>Find broken redirection links and fix</p>

<ul>
<li>The redirection links are now changed to something like <code>{site.root}blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/</code></li>
</ul>
</li>
<li>Find broken image links and fix

<ul>
<li>Inorder to make it easier for migrating to another platform later, I created a new config value in <code>_config.yml</code> as below .
<code>
  images_dir: /images
</code></li>
<li>The image links are not pointing to <code>{site.images_dir}/2017/04/27/Mountebank_XML_Response_Folder-Tree.jpg</code></li>
</ul>
</li>
</ul>


<h1>SEO Optimisation in Octopress</h1>

<ul>
<li>In rake file, add below two lines   <code>post.puts "keywords: "</code> and <code>post.puts "description: "</code></li>
<li>Final content will look like below</li>
</ul>


<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post.puts "---"
</span><span class='line'>post.puts "layout: post"
</span><span class='line'>post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
</span><span class='line'>post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}"
</span><span class='line'>post.puts "comments: true"
</span><span class='line'>post.puts "categories: "
</span><span class='line'>post.puts "keywords: "
</span><span class='line'>post.puts "description: "
</span><span class='line'>post.puts "---"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add relevant Keyword and description to all pages</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powershell - Remove Entire Directory and It's Content]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/05/02/powershell-remove-entire-directory-and-its-content/"/>
    <updated>2017-05-02T06:27:27+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/05/02/powershell-remove-entire-directory-and-its-content</id>
    <content type="html"><![CDATA[<p>The PowerShell command to remove an entire directory and its contents ( including sub folders and files) is below</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -Rf pathToDirectoryToBeRemoved/</span></code></pre></td></tr></table></div></figure>


<p>R flag denotes to run “rm” command recursively . “f” flag denotes to run in forcefully. We can even replace “f” with “v” for verbose mode and “i” for interactive mode.</p>

<p>Note: Above command can also be used to delete files which have long path ( more than 260 characters)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing XML Responses Using Mountebank]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/27/stubbing-xml-responses-using-mountebank/"/>
    <updated>2017-04-27T05:55:51+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/27/stubbing-xml-responses-using-mountebank</id>
    <content type="html"><![CDATA[<p>Previous two blog post talked about how we can use mountebank for stubbing where responses are in json format . They can be accessed (<a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">here</a>) and (<a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2/">here</a>). We can use same approach for stubbing SOAP services using XML as well. In this post, I will explain how we can provide XML response using Mountebank .</p>

<p>Let us have a quick look into the files created. Before we begin, folder structure of various file as below</p>

<p><img src="http://www.abygeorgea.com/images/2017/04/27/Mountebank_XML_Response_Folder-Tree.jpg" alt="folderstructure" /></p>

<h4>Imposter.ejs</h4>

<p>The main Imposter file is</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>&lt;% include Port4547.json %&gt;
</span><span class='line'>]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Port4547.json</h4>

<p>This file specifies which port number to use and what all stubs needs to be created is as below</p>

<figure class='code'><figcaption><span>Port4547.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>{
</span><span class='line'>&lt;% include XMLStubGET.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include XMLStubPOST.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>XMLStubGET.json</h4>

<p>This is the first stub for this example and it looks for any request coming with the method &ldquo;GET&rdquo; and path &ldquo;/Blog.Api/[0-9]+/CustomerView&rdquo; , where [0-9]+ is regular expression of any numeric</p>

<figure class='code'><figcaption><span>XMLStubGET.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetXMLStub.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"method" : "GET",
</span><span class='line'>"path" : "/Blog.Api/[0-9]+/CustomerView"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h4>XMLStubPOST.json</h4>

<p>This is the second stub for this example and it looks for any request coming with method &ldquo;POST&rdquo; and path &ldquo;/Blog.Api/XMLexamplePOST/[0-9]+&rdquo; , where [0-9]+ is regular expression of any numeric .It also needs a body as <Action>Insert</Action><Record>Customer1</Record></p>

<p>Note: If you have body in multi-line, then make sure to enter &ldquo;\n&rdquo; for new line</p>

<figure class='code'><figcaption><span>XMLStubPOST.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetXMLStub-POST.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"body" : "&lt;Action&gt;Insert&lt;/Action&gt;&lt;Record&gt;Customer1&lt;/Record&gt;",
</span><span class='line'>"method" : "POST",
</span><span class='line'>"path" : "/Blog.Api/XMLexamplePOST/[0-9]+"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h4>GetXMLStub.js</h4>

<p>Below js file create a response based on template mentioned and return the response with proper status. Please note that, we are not using &ldquo;Json.Parse&rdquo; here as we did for previous examples involving json.</p>

<figure class='code'><figcaption><span>GetXMLStub.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>response = "&lt;%- stringify(filename, 'StubTemplate\\CustomerDetails.xml') %&gt;"
</span><span class='line'>return {
</span><span class='line'>statusCode : 200,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/xml; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>GetXMLStub-POST.js</h4>

<figure class='code'><figcaption><span>GetXMLStub-POST.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>response = "&lt;%- stringify(filename, 'StubTemplate\\RecordAdded.xml') %&gt;"
</span><span class='line'>return {
</span><span class='line'>statusCode : 200,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/xml; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>CustomerDetails.XML</h4>

<p>This is the template for the first stub - GET example</p>

<figure class='code'><figcaption><span>XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;customer&gt;
</span><span class='line'>  &lt;FirstName&gt;John&lt;/FirstName&gt;
</span><span class='line'>  &lt;LastName&gt;Citizen&lt;/LastName&gt;
</span><span class='line'>  &lt;Address&gt;Some St, Some State, Some Country&lt;/Address&gt;
</span><span class='line'>  &lt;Email&gt;Test@test.com&lt;/Email&gt;
</span><span class='line'>&lt;/customer&gt;</span></code></pre></td></tr></table></div></figure>


<h4>RecordAdded.xml</h4>

<p>This is the template for the second stub - POST example</p>

<figure class='code'><figcaption><span>XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Status&gt;Added&lt;/Status&gt;
</span><span class='line'>&lt;Record&gt;Customer1&lt;/Record&gt;</span></code></pre></td></tr></table></div></figure>


<p>After creating above files and keeping them as per directory structure is shown above, it is time to start mountebank</p>

<blockquote><p>mb &ndash;configfile SOAP-XMLStubExample/Imposter.ejs &ndash;allowInjection</p></blockquote>

<p>Note: Give the right path to Imposter.ejs . If you need to debug Mountebank, you can use below command at the end &ldquo; &ndash;loglevel debug&rdquo;</p>

<p>Now trigger a get request to <a href="http://localhost:4547/Blog.Api/3123/CustomerView.">http://localhost:4547/Blog.Api/3123/CustomerView.</a></p>

<p>This should match with our first predicate and should return the response mentioned</p>

<p>Mountebank_XML_Response_</p>

<p>Now trigger a POST request with a body . If predicates are matched, then it will respond with expected response as below</p>

<p><img src="http://www.abygeorgea.com/images/2017/04/27/Mountebank_XML_Response_PostmanRequest1.png" alt="PostManRequest" /></p>

<p>In Nut shell, creating a XML response is similar to creating json response. There are only minor differences in the js file which creates the response. The main difference is the omission of Json.Parse and also changing the response headers.</p>

<p>Above examples can be cloned from my GitHub repository <a href="https://github.com/abygeorgea/MountebankExamples">here</a>. After cloning the repository to local, just run RunMounteBankStubsWithSOAPXMLStubExampleData.bat file. Postman scripts can also be found inside PostmanCollections Folder to testing this</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Creating a Response Based on a File Template and Modifying It Based on Request - PART 2]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2/"/>
    <updated>2017-04-07T06:24:20+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-2</id>
    <content type="html"><![CDATA[<p>This is an extension to my previous blog about how we can use mountebank to create a stubbed response based on a template file . You can read about it <a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">here</a>.  In this step by step example, I will explain how we will use mountebank to modify the response based on the request . Before we start, please ensure you are familiar with <a href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/">Part1 </a>of the excercise. If you need to know more about mountebank and how to use mountebank , please read through <a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">how to install mountebank </a> and <a href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/">service virtualisation using mountebank</a>.</p>

<p>As in previous example, let us create Imposter.ejs and 4547.json . Contents of the Imposter.ejs is as below</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'> "imposters": [
</span><span class='line'>
</span><span class='line'> &lt;% include 4547.json %&gt;
</span><span class='line'>
</span><span class='line'> ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Contents of 4547.json is as below</p>

<p><strong>4547.json</strong></p>

<figure class='code'><figcaption><span>4547.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'> "port": 4547,
</span><span class='line'> "protocol": "http",
</span><span class='line'> "stubs": [
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'> &lt;% include  CustomerNotFound.json %&gt;
</span><span class='line'> },
</span><span class='line'> {
</span><span class='line'>  &lt;% include  CustomerFound.json %&gt;
</span><span class='line'> }
</span><span class='line'> ]
</span><span class='line'> }
</span></code></pre></td></tr></table></div></figure>


<p>Now create CustomerFound.json</p>

<figure class='code'><figcaption><span>CustomerFound.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> "responses": [
</span><span class='line'> {
</span><span class='line'> "inject": "&lt;%-stringify(filename, 'ResponseInjection\\GetCustomerFound.js') %&gt;"
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "matches": {
</span><span class='line'> "method" : "GET",
</span><span class='line'> "path" : "/Blog.Api/[0-9]+/CustomerView"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]
</span></code></pre></td></tr></table></div></figure>


<p>As we can see from above, if there is request which matches the predicates , then response will be dictated by the GetCustomerFound javascript file kept inside directory ResponseInjection. Predicate used here is a GET request which have a matching path of /Blog.Api/[0-9]+/CustomerView.</p>

<p>Contents of GetCustomerFound.js is</p>

<figure class='code'><figcaption><span>GetCustomerFound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>
</span><span class='line'>response = JSON.parse("&lt;%- stringify(filename, 'StubTemplate\\CustomerFoundView.json') %&gt;");
</span><span class='line'> var ext =require('../../../StubResponse/ResponseInjection/extractrequest');
</span><span class='line'>
</span><span class='line'>var reqdata = ext.extractor(request);
</span><span class='line'>
</span><span class='line'> response.data.customerID=reqdata.CustomerID;
</span><span class='line'>
</span><span class='line'> return {
</span><span class='line'> statusCode : 200,
</span><span class='line'> headers: {
</span><span class='line'> 'Content-Type': 'application/json; charset=utf-8'
</span><span class='line'> },
</span><span class='line'> body: response
</span><span class='line'>
</span><span class='line'> };
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>The javascript file have a single function , which reads the stubbed response kept in template file . Then it calls another Javascript function to called &ldquo;extractrequest&rdquo;. We will see the details of it soon. For now, it actually returns the customer number from the request . For eg, if request is &ldquo;<a href="http://localhost:4547/Blog.Api/3123/CustomerView">http://localhost:4547/Blog.Api/3123/CustomerView</a> &rdquo; then it return 3123 as customer ID. Once we extract the customer ID, then it will replace the customer ID in our template response with the value coming from request and return the response.</p>

<p>Let us take a close look at the extractrequest function.</p>

<figure class='code'><figcaption><span>extractrequest.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>module.exports = {extractor:function extractCIFAndPackageID (request) {
</span><span class='line'>
</span><span class='line'>if(request && request.path) {
</span><span class='line'>var req = request.path.split('/');
</span><span class='line'>if(req.length &gt;2 && req[1]) {
</span><span class='line'>return { CustomerID: req[2] }
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return null;
</span><span class='line'>}}
</span></code></pre></td></tr></table></div></figure>


<p>This method will take the input parameter as the request and split it at &ldquo;/&rdquo; to get a an array . Then we will return the array[2] which is the customer ID from the request</p>

<p>Finally , the template response</p>

<p><strong>CustomerFoundView.json</strong></p>

<figure class='code'><figcaption><span>CustomerFoundView.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"status": "success",
</span><span class='line'>"code": 0,
</span><span class='line'>"message": "",
</span><span class='line'>"data":
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>"customerID": "123",
</span><span class='line'>"firstName": "John",
</span><span class='line'>"lastName": "Citizen",
</span><span class='line'>"email": "John.Citizen@abcabacas.com"
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us fire up mountebank</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/mountebank.png" alt="mountebank" /></p>

<p>Make few request using postman, which have different request parameter</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customerfound1.png" alt="customerFound1" /></p>

<p>Another request</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customerfound2.png" alt="CustomerFound2" /></p>

<p>In above two examples,we  can see the CustomerID field is response is updated with number extracted from request.</p>

<p>Now let us try another example , where request is <a href="http://localhost:4547/Blog.Api/1234542323/CustomerView">http://localhost:4547/Blog.Api/1234542323/CustomerView</a></p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/customernotfound2.png" alt="CustomerNotFound2" /></p>

<p>As you can see, we are getting a customer Not found response. This is due to the order of predicates we use. In our 4547.json, the order of response are as below.</p>

<ol>
<li><p> Customer Not found which has a predicate of &ldquo;/Blog.Api/1[0-9]+/CustomerView&rdquo;</p></li>
<li><p>Customer found which has a predicate of &ldquo;/Blog.Api/[0-9]+/CustomerView&rdquo;</p></li>
</ol>


<p>As you can see from above order, when a request comes through , mountebank will first match with predicate of first response and if it matches, it returns the response. If not, mountebank will keep trying with next one followed by all others. In this particular example, since our request have a customer ID of 1234542323, it matches with regular expression of first one ( 1[0-9]+)  and hence it return customer not found response.</p>

<p>In next blog post, I will provide more insights about how to extract request from different type of requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Creating a Response Based on a File Template and Modifying It Based on Request - PART 1]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1/"/>
    <updated>2017-04-07T05:43:44+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/04/07/mountebank-creating-a-response-based-on-a-file-template-and-modifying-it-based-on-request-part-1</id>
    <content type="html"><![CDATA[<p>In the previous two blog post, I have explained about how to setup mountebank (<a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">here</a>) and how to create a virtualised respone(<a href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/">here</a>) . Now coming to more detailed use cases which we might encounter in daily life. In this blog post, I will explain how we can use mountebank to create a virtualised response based on a template response stored in a file and modifying certain fields in response based on the request coming through.</p>

<p>In below Step by Step example , I will have two mock responses for searching for a customer details. First response is when customer is not available in back end systems and second response is when customer details are found.</p>

<p>Before we start, below is folder structure which I have and in this blog post we are discussing about only one stubbed response, which is the NOT FOUND scenario.</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/folderstructure.png" alt="folderstructure" /></p>

<p>Let us first create the imposter.ejs file</p>

<figure class='code'><figcaption><span>Imposter.ejs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>
</span><span class='line'>&lt;% include 4547.json %&gt;
</span><span class='line'>
</span><span class='line'>]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us create the file which specifies the port number where it should run and order of responses. Below code tells mountebank that port which it needs to listen for incoming request is 4547 and protocol is http. There are two set of mock responses planned.</p>

<figure class='code'><figcaption><span>4545</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>&lt;% include CustomerNotFound.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include CustomerFound.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<p>In this example, let us look at first mock response.</p>

<figure class='code'><figcaption><span>CustomerNotFOund.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"responses": [
</span><span class='line'>{
</span><span class='line'>"inject": "&lt;%- stringify(filename, 'ResponseInjection\\GetCustomerNotFound.js') %&gt;"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>],
</span><span class='line'>"predicates": [
</span><span class='line'>{
</span><span class='line'>"matches": {
</span><span class='line'>"method" : "GET",
</span><span class='line'>"path" : "/Blog.Api/1[0-9]+/CustomerView"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>From above response, we can infer below. When ever an http GET request come to port 4547 , with a path matching &ldquo;/Blog.Api/1[0-9]+/CustomerView', then we will call the Javascript function "GetCustomerNotFound.js&rdquo; which is kept inside a directory &ldquo;ResponseInjection&rdquo; in same location. It is also good to notice that , predicate is a regular expression ( hence use matches) and all request where 1 followed by any number of numeric will be returned with this response</p>

<p>The javascript function listed here is responsible for reading the sample template response and sending it back .</p>

<figure class='code'><figcaption><span>GetCustomerNotFound.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GetTemplateResponse (request, state, logger) {
</span><span class='line'>
</span><span class='line'>response = JSON.parse("&lt;%- stringify(filename, 'StubTemplate\\CustomerNotFoundView.json') %&gt;");
</span><span class='line'>
</span><span class='line'>return {
</span><span class='line'>statusCode : 404,
</span><span class='line'>headers: {
</span><span class='line'>'Content-Type': 'application/json; charset=utf-8'
</span><span class='line'>},
</span><span class='line'>body: response
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Above function reads a json response kept inside directory &ldquo;StubTemplate&rdquo; and convert it to json and return to mountebank. Since this is for a scenario where customer records are not found,we set the status code as 404. We can also set the headers if needed</p>

<p>The stub template is as below</p>

<figure class='code'><figcaption><span>CustomerNotFoundView.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>"status": "fail",
</span><span class='line'>"code": "CUSTOMER_NOT_FOUND",
</span><span class='line'>"message": "Customer details not found."
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now let us run mountebank</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/mountebank.png" alt="mountebank" /></p>

<p>Request through postman</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/04/notfound.png" alt="notfound.png" /></p>

<p>As you can see , the GET request matching with predicate is returning the stubbed response with status 404.</p>

<p>For real time usage for testing any web application which needs to get a 404 message from back end API calls, just point the end point to this local host end point and fire a request which matches the predicate.</p>

<p>Details of second response will be shared in next blog post</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountebank - Your First Service Virtualisation]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation/"/>
    <updated>2017-03-03T22:46:48+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/03/03/mountebank-your-first-service-virtualisation</id>
    <content type="html"><![CDATA[<p>In current development world, there will be scenarios were both API and its consumers are developed in parallel. Inorder to decouple their dependencies, we can mock an api response using mountebank. In this example, I will explain how to get started with your first service virtualisation using mountebank. After installing mountebank as mentioned in <a href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/">here (Install Mountebank)</a>, we will proceed with configuring mountebank. It can be done in few ways. The method which I explain below is by using file based configuration. This involve setting up an imposter file and a stub response</p>

<h2>How to Create a Stub</h2>

<ol>
<li><p>Navigate to mountebank installation path</p></li>
<li><p>Create a folder and name it as &ldquo;StubResponse&rdquo;. ( You can name it whatever you want)</p></li>
<li><p>Create two json file using notepad and save it as &ldquo;MockResponeForApiOne.json&rdquo; and &ldquo;MockResponeForApiTwo.json&rdquo;( Or what ever you want).</p></li>
<li><p>Copy paste below code to &ldquo;MockResponeForApiOne.json&rdquo; . Sample example only. Update the response and predicates to suite your need ( if required)</p></li>
</ol>


<figure class='code'><figcaption><span>MockResponseForApiOne.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>"responses": [
</span><span class='line'> {
</span><span class='line'> "is": {
</span><span class='line'> "statusCode": 200,
</span><span class='line'> "body": {
</span><span class='line'> "Text":"Response ONE ","token":"username","expires_in":90
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "exists": {
</span><span class='line'> "body" :
</span><span class='line'> {
</span><span class='line'> "username": true,"password" : true
</span><span class='line'> },
</span><span class='line'> "method" : "POST",
</span><span class='line'> "path" : "/Apitesting/v1/test?type=ResponseOne"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]</span></code></pre></td></tr></table></div></figure>


<p>-</p>

<ol>
<li>Copy paste below code to &ldquo;MockResponeForApiTwo.json&rdquo; . Sample example only. Update the response and predicates to suite your need ( if required)</li>
</ol>


<figure class='code'><figcaption><span>MockResponseForApiTwo.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> "responses": [
</span><span class='line'> {
</span><span class='line'> "is": {
</span><span class='line'> "statusCode": 200,
</span><span class='line'> "body": {
</span><span class='line'> "Text":"Response TWO ","token":"emailAddress","expires_in":90
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ],
</span><span class='line'> "predicates": [
</span><span class='line'> {
</span><span class='line'> "exists": {
</span><span class='line'> "body" :
</span><span class='line'> {
</span><span class='line'> "email": true,"password" : true
</span><span class='line'> },
</span><span class='line'> "method" : "POST",
</span><span class='line'> "path" : "/Apitesting/v1/test?type=ResponseTwo"
</span><span class='line'> }
</span><span class='line'> }
</span><span class='line'> ]</span></code></pre></td></tr></table></div></figure>


<h2>How to create an Imposter</h2>

<ol>
<li><p>Create another file called test.json in same path as above</p></li>
<li><p>copy and paste below contents to it</p></li>
</ol>


<figure class='code'><figcaption><span>test.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{
</span><span class='line'>"imposters": [
</span><span class='line'>{
</span><span class='line'>"port": 4547,
</span><span class='line'>"protocol": "http",
</span><span class='line'>"stubs": [
</span><span class='line'>{
</span><span class='line'>&lt;% include MockResponseForApiOne.json %&gt;
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>&lt;% include MockResponseForApiTwo.json %&gt;
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}
</span><span class='line'>]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Let us have a close look into Imposter and stubs</h2>

<p>Responses – Contains an array of responses expected to return for the defined stub. In the above scenario the response will include status code as 200 and response body. For more info, <a href="http://www.mbtest.org/docs/api/contracts">http://www.mbtest.org/docs/api/contracts</a>
Predicates – is an array of predicates which will be used during matching process. Predicate object can be quite complex, it supports lots of different matching techniques.
For more info, <a href="http://www.mbtest.org/docs/api/predicates">http://www.mbtest.org/docs/api/predicates</a></p>

<h2>Let&rsquo;s Mock it</h2>

<p>Once all required files are created and saved, mountebank can be started by following command in command prompt , after navigating to installation folder of mountebank</p>

<figure class='code'><figcaption><span>test.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>mb --configfile StubResponse/test.json
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/cmd.jpg" alt="cmd.jpg" /></p>

<p>Once mountebank is started, we can verify it by navigating to path <a href="http://localhost:2525/imposters">http://localhost:2525/imposters</a></p>

<p>It will list out all active ports and a list of stubs available</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/imposter.jpg" alt="imposter" /></p>

<h2>Test It</h2>

<p>Once we complete above steps, mountebank is ready with stubs. Now comes the part to test it and use. You can use any api testing tool ( Postman, soapUi etc ) for testing this. Just send the request matching the predicates and look for the responses</p>

<p>Below are the screenshot of Postman request</p>

<p><strong>Requesting for First API.</strong></p>

<p>Predicate of response One says that , request has to be of type POST, body of request should have &ldquo;username&rdquo; and &ldquo;password&rdquo; . Path of the request should have /Apitesting/v1/test?type=ResponseOne"</p>

<p>Now construct a postman request matching above and fire it</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/bgone.jpg" alt="bgone" /></p>

<p><strong>Request for second API</strong></p>

<p>Predicate of response One says that , request has to be of type POST, body of request should have &ldquo;<strong>email</strong>&rdquo; and &ldquo;password&rdquo; . Path of the request should have /Apitesting/v1/test?type=Response<strong>Two</strong>"</p>

<p>Now construct a postman request matching above and fire it</p>

<p><img src="https://automationtestingtips.files.wordpress.com/2017/03/bgtwo.jpg" alt="bgtwo" /></p>

<p>As you can see, both request has succesfully received expected response message</p>

<p>For actual development usage, just point your application to this localhost URL and start consuming virtualised API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Virtualisation Using Mountebank]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank/"/>
    <updated>2017-02-13T22:13:58+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/02/13/service-virtualisation-using-mountebank</id>
    <content type="html"><![CDATA[<h1>What is Mountebank?</h1>

<blockquote>As per mbtest.org "_mountebank is the first open source tool to provide cross-platform, multi-protocol test doubles over the wire. Simply point your application under test to mountebank instead of the real dependency, and test like you would with traditional stubs and mocks_"</blockquote>


<p>In short mountebank is a open source service virtualisation tool . Mountebank uses imposters to act as on demand test doubles. Hence our test cases communicate to Mountebank and mountebank responds back with relevant stubs as defined.</p>

<h1>How to Setup Mountebank ?</h1>

<p>Installation can be done via two methods</p>

<h3>npm</h3>

<p>Mountebank can be installed as a npm package. Node.js should be installed for this option to work</p>

<pre><code>&lt;code&gt;npm install -g mountebank&lt;/code&gt;
</code></pre>

<h3>Self contained Installation file</h3>

<p>OS Specific installation file can be downloaded from <a href="http://www.mbtest.org/docs/install">Download</a></p>

<p>Note: Please read through the windows path limitation mentioned in above link</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Testing- Decoupling Back End Dependency]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/02/12/ui-testing-in-isolation/"/>
    <updated>2017-02-12T08:41:43+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/02/12/ui-testing-in-isolation</id>
    <content type="html"><![CDATA[<p>The traditional approach for automating UI test cases is to create selenium web driver based ( or any UI testing tools) scripts for exercising complete end to end flow. However, it comes with its own challenges. It will have multiple steps as pre-requiste for reaching required UI page and hence it behaves as an E2E integration test rather than UI test.</p>

<p>A typical web application architecture will have one or more front-end application, which will talk to multiple back-end services, API&rsquo;s etc. They will, in turn, talk to other back-end services or to different databases. On High level , architecture looks like below
<img src="http://www.abygeorgea.com/images/2017/02/02/UIinIsolation_1.png" alt="" /></p>

<p> On an enterprise world, all these will be developed and maintained by different teams. All of them will be working in parallel and will push in their code changes ( including occasional broken code) frequently. This will result in breakages since test automation scripts heavily depending on UI and its integration. Even if there is no broken code, a test can still fail due to multiple environmental issues for any of the backend services and other components.  Hence it will become increasingly difficult for achieving a green build.</p>

<p>Hence UI based test cases are less robust due different reasons like</p>

<ol>
<li><p>Test depends on external factors which are outside of our control and not part of scope of testing</p></li>
<li><p>Failing test may not pin point exact location of failure since it is trying to test too many things.</p></li>
<li><p>There are chances that all components will not be ready when we want to test UI. Hence testing it pushed to the end , which will increase cost of fixing defects.</p></li>
<li><p>Re - running of test cases may pass (if failure is caused by environmental issues)</p></li>
<li><p>UI test are brittle by nature since they will even fail  due to timing issues because it is depending on data from back end services.</p></li>
</ol>


<p>The solution for above is to adopt more unit test like structure for UI testing. We should be testing UI in isolation to other back-end services and their dependency. This allows testing as much as possible early in lifecycle without any dependency on other streams. We should replace all backend service calls with stubs</p>

<p><img src="http://www.abygeorgea.com/images/2017/02/02/UIinIsolation_2.png" alt="" /></p>

<p>Mountebank is a tool which we can use for mocking the service calls. As per <a href="http://www.mbtest.org/">mbtest.org</a>, mountebank is the first open source tool to provide cross-platform, multi-protocol test doubles over the wire.  We can use mountebank for stubbing the back-end service calls and there by use it for decoupling UI from unpredictable back end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powershell - Copying Folders and Files]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/10/10/powershell-copying-folders-and-files/"/>
    <updated>2016-10-10T07:47:54+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/10/10/powershell-copying-folders-and-files</id>
    <content type="html"><![CDATA[<p>Two options for copying files are below.</p>

<ul>
<li>Robocopy - More details can be found at <a href="https://technet.microsoft.com/en-us/library/cc733145.aspx">Robocopy</a></li>
<li>Copy_Item cmdlet - More details can be found at <a href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.management/copy-item">Copy-Item</a></li>
</ul>


<h3>Copying Folder structure Only</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'>Copy-Item $source $dest -Filter {PSIsContainer} -Recurse -Force
</span><span class='line'>
</span><span class='line'>#OR
</span><span class='line'>robocopy $source $dest /e /xf *.*
</span><span class='line'>
</span><span class='line'># /e denotes all folder including empty folders. /xf denotes all files except one of format *.*
</span><span class='line'># /e can be replaced with /s for ignoring empty folders</span></code></pre></td></tr></table></div></figure>


<h3>Flattening Folder structure - Copy all files from nested folders to a single folder</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'># Below is required only if we need to create destination folder. Uncomment below line if folder needs to be created
</span><span class='line'>#New-Item $dest -type directory 
</span><span class='line'>
</span><span class='line'>Get-ChildItem $source -Recurse | `
</span><span class='line'>    Where-Object { $_.PSIsContainer -eq $False } | `
</span><span class='line'>    ForEach-Object {Copy-Item -Path $_.Fullname -Destination $dest -Force} </span></code></pre></td></tr></table></div></figure>


<h3>Copy same folder structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$source = "C:\tools\DevKit2\octopress-blog\source"
</span><span class='line'>$dest = "D:\delete"
</span><span class='line'>robocopy $source $dest /e</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - How to Solve Filename Too Long Error]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/23/git-how-to-solve-filename-too-long-error/"/>
    <updated>2016-09-23T06:31:03+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/23/git-how-to-solve-filename-too-long-error</id>
    <content type="html"><![CDATA[<p>Git for windows is normally shipped with long path support disabled due to mysys not supporting file path/name greater than 260 character. While cloning repository with large nested directory structute may cause error &ldquo;file name too long&rdquo;. This can be fixed by below command. It can be executed using powershell or cmd directly in project ( or anywhere if git variable is available)</p>

<figure class='code'><figcaption><span>cmd.exe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --system core.longpaths true</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Take Screenshots With Selenium in C#]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c/"/>
    <updated>2016-09-06T22:00:23+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c</id>
    <content type="html"><![CDATA[<p>Very frequently testers will meet a situation where they need to take screenshot of webpage they are testing , either for base line or as a proof of test result. This is same with automated testing . Even though automated test cases have their own of way of publishing test results, it is always desirable to keep a proof of result.. Screenshot come to help in this regards. In this blog post , I will explain , how to take a screenshot with Selenium Web Driver with C#. In future I will add another couple of post to explain , how to consolidate the screenshots into a PDF document.</p>

<p>In .NET binding, we have an interface called ITakesScreenshot , which helps to capture screenshot of active window. Below code will help to take screenshot and save it in the path specified while calling the function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>// PathToFolder is the location where we need to save the screenshot
</span><span class='line'>// FileName is another string where PathToFolder is appended with timestamp
</span><span class='line'>public void TakeScreenShot(string PathToFolder)
</span><span class='line'>{
</span><span class='line'>  string fileName = PathToFolder + DateTime.Now.ToString("HHmmss") +".jpeg";
</span><span class='line'>  Screenshot cp = ((ITakesScreenshot)driver).GetScreenshot();
</span><span class='line'>  cp.SaveAsFile(fileName, System.Drawing.Imaging.ImageFormat.Jpeg);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath Axis]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/04/element-location-using-xpath-axis/"/>
    <updated>2016-09-04T08:33:04+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/04/element-location-using-xpath-axis</id>
    <content type="html"><![CDATA[<p>During testing we will sometimes come up to situations where developers are not following best practises for testability . We will frequently come up situations where elements doesn&rsquo;t have any unique identifiable property. XPath axis comes to help in those situations. We can identify elements using various XPath Properties</p>

<p>List of various XPath Axis are available in <a href="https://developer.mozilla.org/en-US/docs/Web/XPath/Axes">https://developer.mozilla.org/en-US/docs/Web/XPath/Axes</a>
If you have well-defined properties to identify the element, use them as your locator. Please read  locator strategy  <a href="http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath/">Using XPath</a> and <a href="http://www.abygeorgea.com/blog/2016/08/17/identifying-elements-using-locators-in-selenium/">Other Parameters</a></p>

<p>Below are major one&rsquo;s which we will frequently use</p>

<h3>1. ancestor</h3>

<p>This selects all ancestors of current node. That will include parent, grand parents etc
Eg :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> //td[text()='Product Desc']/ancestor::tr</span></code></pre></td></tr></table></div></figure>


<h3>2. descendant</h3>

<p>This selects all children of current node. That will include child, grand child etc
Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/table/descendant::td/input</span></code></pre></td></tr></table></div></figure>


<h3>3. followingis</h3>

<p>Th selects everything after the closing tag of current node Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//td[text()='Product Desc']/following::tr</span></code></pre></td></tr></table></div></figure>


<h3>4. following-sibling</h3>

<p>This selects all siblings after the closing tah of current node.
Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//td[text()='Product Desc']/followingsibling::td</span></code></pre></td></tr></table></div></figure>


<h3>5. preceding</h3>

<p>This selects everything prior to current node
Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> //td[text()='Add to cart']/preceding::tr</span></code></pre></td></tr></table></div></figure>


<ol>
<li>preceding-sibling</li>
</ol>


<p>This selects all siblings prior to current node
Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//td[text()='Add to cart']/precedingsibling::td</span></code></pre></td></tr></table></div></figure>


<h3>7. child</h3>

<p>This selects all children of current node</p>

<h3>8. parent</h3>

<p>This select parent of current node</p>

<p>As usual , you can always use combinations of above in your test. Statements can be constructed in the same way as we traverse the XPath axis</p>

<p>Last , but not least&hellip; we can also use regular expression in XPath.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath/"/>
    <updated>2016-08-30T20:58:16+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath</id>
    <content type="html"><![CDATA[<p>XPath is XML query language which can be used for selecting nodes in XML. Hence it can be used to identify elements from DOM since they are represented as XHTML documents. Selenium WebDriver also supports XPath for locating elements. They also help to look for elements in both direction and hence it is generally slow compared to all other locator strategy. We can use XPath with both absolute path and relative path.</p>

<h4><strong>Absolute XPath</strong></h4>

<p>Absolute Path refers to specific location in DOM, by considering it&rsquo;s complete hierarchy. However this is not an ideal locator strategy since it makes your test very brittle. The absolute path will change if there is any change/realignment etc in UI.</p>

<p>Example of Xpath using absolute path is as below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement userId = driver.FindElement(By.XPath(html/body/div[2]/div/form/input[2]));
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Relative XPath</strong></h4>

<p>With relative Path , we can find element directly without entire structure. It helps to look out for any elements which matches with specified relative path . Example for a relative path based locator strategy is as below.</p>

<p>Note: Relative XPath starts with &ldquo;//&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement userId = driver.FindElement(By.XPath("//input"));
</span><span class='line'>// This retrieve first element with input tag.
</span><span class='line'>WebElement userId = driver.FindElement(By.XPath("//input[2]"));
</span><span class='line'>// This retrieve second element with input tag.
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Relative XPath  - With Attributes</strong></h4>

<p>If we need to further narrow down our location strategy, we can use Attributes along with relative XPath. There may be situations where we need to multiple attributes to uniquely identify an element. We can also specify locators to identify for ANY attribute</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement passwordField = driver.FindElement(By.XPath("//input[@id='password']"));
</span><span class='line'>// Above will identify first element with input tag which also has id as "password".
</span><span class='line'>
</span><span class='line'>WebElement LoginButton = driver.FindElement(By.XPath("//input[@type='submit'and @value='Login']"));
</span><span class='line'>//Note you can use "or" as well.
</span><span class='line'>WebElement someField = driver.FindElement(By.XPath("//input[@*='password']"));
</span><span class='line'>// Above will identify first element with input tag which also has any attribute as "password".</span></code></pre></td></tr></table></div></figure>


<h4><strong>Relative XPath - Partial Match</strong></h4>

<p>Sometimes there may be situations where element attributes like ID are dynamically generated. Those will generally have some unique part in attributes likeID and
remaining will be generated dynamically , which will keep on changing. This will need a locator strategy which will help us to identify elements using partial match. Main types are</p>

<ul>
<li><p>starts-with()</p></li>
<li><p>ends-with()</p></li>
<li><p>contains()</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebElement passwordField1 = driver.FindElement(By.XPath("//input[starts-with(@id,'password')]"));
</span><span class='line'>// Above will identify first element with input tag which also has id starting with "password".
</span><span class='line'>WebElement passwordField2 = driver.FindElement(By.XPath("//input[ends-with(@id,'password')]"));
</span><span class='line'>// Above will identify first element with input tag which also has id ending with "password".
</span><span class='line'>
</span><span class='line'>WebElement passwordField3 = driver.FindElement(By.XPath("//input[contains(@id,'password')]"));
</span><span class='line'>// Above will identify first element with input tag which also has id containing with "password".</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Identifying Elements Using Locators in Selenium]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/18/identifying-elements-using-locators-in-selenium/"/>
    <updated>2016-08-18T06:30:54+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/18/identifying-elements-using-locators-in-selenium</id>
    <content type="html"><![CDATA[<p>Locators are html properties of a web element , which can be considered as an address of the element. An element will have various html properties. We can use Firebug extension or Chrome dev tools to identify different locators of an element.</p>

<p>Selenium Web Driver provides two different methods for identifying html elements .</p>

<ul>
<li><p><em><strong>FindElement  </strong></em>for WebDriver and WebElement Class. When locating element matching specified criteria, it looks through DOM( Document Object Model) for matching element and return the first matching element. If there are no matching element, it will throw NoSuchElementFoundException</p></li>
<li><p><em><strong>FindElements</strong> </em>for WebDriver and WebElement Class. When locating element matching specified criteria, it looks through DOM( Document Object Model) for matching element and return a list of all matching element. If there are no matching elements, then it will return an empty list .</p></li>
</ul>


<p>Note: Both of them doesn&rsquo;t support regular expression for finding element. Simple way to do that will be to get list of all elements and then iterate to find a matching regular expression</p>

<p>There are multiple criteria which we can use for looking for an element. FindElement and FindElements work exactly same way except for above difference. Different critieria are</p>

<ul>
<li><p>driver.FindElement(By.Id(<elementID>))</p></li>
<li><p>driver.FindElement(By.Name(<element name>))</p></li>
<li><p>driver.FindElement(By.ClassName(<element class>))</p></li>
<li><p>driver.FindElement(By.TagName(<htmltagname>))</p></li>
<li><p>driver.FindElement(By.LinkText(<linktext >))</p></li>
<li><p>driver.FindElement(By.PartialLinkText(<linktext >))</p></li>
<li><p>driver.FindElement(By.CssSelector(<css selector >))</p></li>
<li><p>driver.FindElement(By.XPath(<xpath query expression>))</p></li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>WebElement _firstElement = driver.findElement(By.id("div1"));
</span><span class='line'>WebElement _secondElementInsideFirstOne =_firstElement .findElement(By.linkText("username"));
</span><span class='line'>
</span><span class='line'>IList&lt;IWebElement&gt; elements = driverOne.FindElements(By.ClassName(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;“&lt;/span&gt;green&lt;span class="pl-pds"&gt;“&lt;/span&gt;&lt;/span&gt;));
</span></code></pre></td></tr></table></div></figure>


<p>Using any attributes other than XPath and CssSelector are straight forward. More about using XPath and CssSelector in next blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specflow - Sharing Data Between Steps]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/01/specflow-sharing-data-between-steps/"/>
    <updated>2016-08-01T12:12:23+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/01/specflow-sharing-data-between-steps</id>
    <content type="html"><![CDATA[<p>In Specflow, Step definitions are global. So a scenario can have multiple step definitions which can be present in different classes.  Sometimes, there arise a need to share the data between steps residing in different classes. How do we do it??</p>

<p>There are multiple ways to do it</p>

<ol>
<li><p>Context Injection</p></li>
<li><p>Feature Context</p></li>
<li><p>Scenario Context</p></li>
</ol>


<p>Let us look into more details about how to store and retrieve data using Scenario Context .</p>

<p><strong>ScenarioContext.Current</strong></p>

<p>How do we add a key value pair to Scenario Context ? It is as simple as below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Given(@"I have entered (.*) and (.*) into the Login Page")]
</span><span class='line'>public void GivenIHaveEnteredAndIntoTheLoginPage(string p0, string p1)
</span><span class='line'> {
</span><span class='line'> ScenarioContext.Current.Add("username", p0);
</span><span class='line'> ScenarioContext.Current.Add("password", p1);
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>


<p>How do we retrieve the value from ScenarioContext ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>When(@"I press retrieve data")]
</span><span class='line'>public void WhenIRetrieveData()
</span><span class='line'>{
</span><span class='line'>string username = (string)ScenarioContext.Current["username"];
</span><span class='line'>string password = (string)ScenarioContext.Current["password"];
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note: While retrieving , scenarioContext.Current always return an object . Hence we need use explicit casting while retrieving data from scenario context.</p>

<p>In Nut Shell,</p>

<blockquote>**Set a value for a key ( Store data ) **
ScenarioContext.Current.Add(string key, object value);

**Get a value of the key ( Retrieve data) **
var value =(Type) ScenarioContext.Current.[string Key];

var value = ScenarioContext.Current.Get(string Key);</blockquote>


<p>We can use this for storing and passing objects as well</p>

<blockquote>Example of storing webdriver object is as below.(where "browser" is current webdriver object )

ScenarioContext.Current.Add("driver1", browser);

IWebDriver driver2 = (IWebDriver)ScenarioContext.Current["driver1"];</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Driven Framework - XML]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/07/30/data-driven-framework-xml/"/>
    <updated>2016-07-30T08:10:02+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/07/30/data-driven-framework-xml</id>
    <content type="html"><![CDATA[<p>I am not going to explain what is data driven framework or what is its benefits.  All of them are pretty well-known . If not, just google it.</p>

<p>Here I am going to explain a sample code which can be used to read from xml data files. This will be helpful to implement a data driven frame work for BDD testing , using Specflow or Cucumber</p>

<h2>Pre - requiste</h2>

<p>Code is written in Csharp . We need to add below reference to visual studio solution</p>

<ol>
<li><p>Add reference to System.xml</p></li>
<li><p>Add reference to System.Xml.Linq</p></li>
</ol>


<h2><strong>XML Format</strong></h2>

<p>[code language=&ldquo;xml&rdquo; ]</p>

<p>[/code]</p>

<p>Node names in above example are Scenario1, Scenario2 and Scenario3</p>

<p>Element or Attribute name are username, password, Email .</p>

<p>You can add any number of nodes and attributes depending on the test scenario</p>

<h2><strong>Read specific Value from XML</strong></h2>

<p>Below code provides a solution to read values of existing Key/Attribute from a specific node.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static string ReadDataFromXML(string FileName, string NodeName, string KeyName)
</span><span class='line'>{
</span><span class='line'> string _basePath = AppDomain.CurrentDomain.BaseDirectory.ToString();
</span><span class='line'>string _datafilePath = _basePath + @"..\..\Data\" + FileName;
</span><span class='line'>XDocument xmlDoc = XDocument.Load(_datafilePath);
</span><span class='line'>data = xmlDoc.Root.Element(NodeName).Attribute(KeyName).Value;
</span><span class='line'>return data;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p> </p>

<h2>Read All values for a Scenario from XML</h2>

<p>This code gives a solution for reading details of all attributes/key from a node. This comes very handy for reading all data required for a scenario and adding them to scenario context , so that data can be shared across specflow/cucumber step definitions</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void ReadAllDataFromXml(string xFileName, string xNodeName)
</span><span class='line'>{
</span><span class='line'> string data = string.Empty;
</span><span class='line'>// Load path of xml file . Data Folder in below is folder name
</span><span class='line'>string _basePath = AppDomain.CurrentDomain.BaseDirectory.ToString();
</span><span class='line'>string _datafilePath = _basePath + @"..\..\Data\" + xFileName;
</span><span class='line'>XDocument xmlDoc = XDocument.Load(_datafilePath);
</span><span class='line'>
</span><span class='line'>var cols = xmlDoc.Descendants(xNodeName).First();
</span><span class='line'>
</span><span class='line'>foreach (XAttribute xAtt in cols.Attributes())
</span><span class='line'>{
</span><span class='line'>Console.WriteLine("{0},{1}", xAtt.Name, xAtt.Value); // --printing values --
</span><span class='line'>string temp = xAtt.Name.ToString();
</span><span class='line'>ScenarioContext.Current.Add(temp, xAtt.Value);
</span><span class='line'>// The values are added to scenario context as key value pair.can be modified
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Write Data into XML</h2>

<p>  Below function gives a solution to update value on an existing key/attribute in data sheet . Sometime the data sheet will be copied over to bin folder when we build the solution. That makes it necessary to update both original data sheet and the one in bin folder  so that modified data can be used in same test without another rebuild.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void WriteIntoXML(string xData, string xElement, string xAttribute, string xFileName)
</span><span class='line'>{
</span><span class='line'> // This solution updates value of an existing key.
</span><span class='line'> // Xdoc refers to the xmlsheet in the Solution explorer
</span><span class='line'> // xDoc_2 refers to the xmlsheet inside bin folder while running
</span><span class='line'>
</span><span class='line'> // This solution write them separately in below code.
</span><span class='line'> // Below is the path to xml file after building solution
</span><span class='line'> XDocument xDoc_2 = XDocument.Load(Path.Combine(Environment.CurrentDirectory, "Data Folder", xFileName));
</span><span class='line'>
</span><span class='line'> //Below should be the path of xml file
</span><span class='line'> XDocument xDoc = XDocument.Load(Path.Combine(Path.GetFullPath(@"../../Data Folder"), xFileName));
</span><span class='line'> xDoc_2.Root.Element(xElement).Attribute(xAttribute).Value = data.ToString();
</span><span class='line'> xDoc.Root.Element(xElement).Attribute(xAttribute).Value = data.ToString();
</span><span class='line'> xDoc_2.Save(Path.Combine(Environment.CurrentDirectory, "Data Folder", xFileName));
</span><span class='line'> xDoc.Save(Path.Combine(Path.GetFullPath(@"../../Data Folder"), xFileName));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Driven Framework - Excel]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/07/30/data-driven-framework-excel/"/>
    <updated>2016-07-30T05:49:22+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/07/30/data-driven-framework-excel</id>
    <content type="html"><![CDATA[<p>In previous blog post, I have explained about how use XML for making a data driven framework for automation testing . It can be found <a href="http://www.abygeorgea.com/blog/2016/07/29/data-driven-framework-xml/">here</a>. I have also written about how to use jxl library for <a href="http://www.abygeorgea.com/blog/2014/06/01/java-reading-a-specific-cell-in-excel/">reading from excel</a> and <a href="http://www.abygeorgea.com/blog/2014/06/01/java-writing-into-specific-cell-in-excel/">writing into Excel</a>.</p>

<p>Below is another code snippet to read all values of a row and save it into a hash map for accessing later during automation test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span>  <span class="n">HashMap</span> <span class="nf">GetAllDataForARow</span>  <span class="o">(</span><span class="n">String</span> <span class="n">sheet</span><span class="o">,</span> <span class="kt">int</span> <span class="n">Row</span><span class="o">){</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">DataMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Workbook</span> <span class="n">wrk1</span> <span class="o">=</span>  <span class="n">Workbook</span><span class="o">.</span><span class="na">getWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">dataPath</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//Obtain the reference to the first sheet in the workbook</span>
</span><span class='line'>            <span class="n">Sheet</span> <span class="n">sheet1</span> <span class="o">=</span> <span class="n">wrk1</span><span class="o">.</span><span class="na">getSheet</span><span class="o">(</span><span class="n">sheet</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="n">Cell</span> <span class="n">colArow1</span> <span class="o">,</span> <span class="n">colArow2</span><span class="o">;</span>
</span><span class='line'>            <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">colArow1</span> <span class="o">=</span> <span class="n">sheet1</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="n">colArow2</span> <span class="o">=</span> <span class="n">sheet1</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">Row</span><span class="o">);</span>
</span><span class='line'>                <span class="n">DataMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">colArow1</span><span class="o">.</span><span class="na">getContents</span><span class="o">(),</span> <span class="n">colArow2</span><span class="o">.</span><span class="na">getContents</span><span class="o">());</span>
</span><span class='line'>                <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span><span class="k">while</span> <span class="o">(</span><span class="n">colArow1</span><span class="o">.</span><span class="na">getContents</span><span class="o">()</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">BiffException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">IndexOutOfBoundsException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">DataMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Volunteering Experience]]></title>
    <link href="http://www.abygeorgea.com/blog/2015/10/16/volunteering-experience/"/>
    <updated>2015-10-16T21:40:35+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2015/10/16/volunteering-experience</id>
    <content type="html"><![CDATA[<p>A couple of months back , I helped out to organize clinical examination for RACP. I created a tool ( Excel Macro)  for finalizing exam schedules for all attendees. The roster should consider employee preference, examiner availability, timeslot, venue and other parameters. Below is what I got in return ( even though they misspelled my name).</p>

<p><img src="http://www.abygeorgea.com/images/2015/10/16/volunteer%20certificate.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java - Writing Into Specific Cell in Excel]]></title>
    <link href="http://www.abygeorgea.com/blog/2014/06/10/java-writing-into-specific-cell-in-excel/"/>
    <updated>2014-06-10T22:24:30+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2014/06/10/java-writing-into-specific-cell-in-excel</id>
    <content type="html"><![CDATA[<p>In my previous blog post , I have mentioned how to read from an excel file using jxl jar files in Java. It can be found <a href="http://www.abygeorgea.com/blog/2014/06/01/java-reading-a-specific-cell-in-excel/">here</a></p>

<p>In this post, I will explain how to write into an excel using same library. Below example will update the excel cell content with the value passed and also update its formatting . The color of the cell will change depending on value we pass. We can use similar functions for updating any other cell format.</p>

<p>Below is the import section</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import jxl.Cell;
</span><span class='line'>import jxl.Sheet;
</span><span class='line'>import jxl.Workbook;
</span><span class='line'>import jxl.format.Colour;
</span><span class='line'>import jxl.read.biff.BiffException;
</span><span class='line'>import jxl.write.*;</span></code></pre></td></tr></table></div></figure>


<p>Below is the function for writing into excel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span>  <span class="kt">void</span> <span class="nf">WriteDataIntoExcelCell</span> <span class="o">(</span><span class="n">String</span> <span class="n">sheet</span><span class="o">,</span> <span class="n">String</span> <span class="n">field_name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">Row</span><span class="o">,</span> <span class="n">String</span> <span class="n">input</span><span class="o">){</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Workbook</span> <span class="n">wrk1</span> <span class="o">=</span>  <span class="n">Workbook</span><span class="o">.</span><span class="na">getWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">dataPath</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Obtain the reference to the first sheet in the workbook</span>
</span><span class='line'>        <span class="n">Sheet</span> <span class="n">sheet1</span> <span class="o">=</span> <span class="n">wrk1</span><span class="o">.</span><span class="na">getSheet</span><span class="o">(</span><span class="n">sheet</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">Col</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// Find Column number from excel by iteration first row and comparing the names</span>
</span><span class='line'>        <span class="n">Cell</span> <span class="n">colArow1</span> <span class="o">=</span> <span class="n">sheet1</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">colArow1</span> <span class="o">=</span> <span class="n">sheet1</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">colArow1</span><span class="o">.</span><span class="na">getContents</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">field_name</span><span class="o">)</span> <span class="o">){</span>
</span><span class='line'>                <span class="n">Col</span> <span class="o">=</span> <span class="n">colArow1</span><span class="o">.</span><span class="na">getColumn</span><span class="o">();</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span><span class="k">while</span> <span class="o">(</span><span class="n">colArow1</span><span class="o">.</span><span class="na">getContents</span><span class="o">()</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// write to file</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">exlFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">dataPath</span><span class="o">);</span>
</span><span class='line'>        <span class="n">WritableWorkbook</span> <span class="n">writableWorkbook</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">createWorkbook</span><span class="o">(</span><span class="n">exlFile</span><span class="o">,</span><span class="n">wrk1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">WritableSheet</span> <span class="n">writableSheet</span> <span class="o">=</span> <span class="n">writableWorkbook</span><span class="o">.</span><span class="na">getSheet</span><span class="o">(</span><span class="n">sheet</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//WritableCellFormat writableCell = writableWorkbook.getSheet(sheet).</span>
</span><span class='line'>      <span class="c1">// Update cell content and format</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">Varcolour</span> <span class="o">;</span>
</span><span class='line'>        <span class="n">Label</span> <span class="n">label</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;PASS&quot;</span><span class="o">)){</span>
</span><span class='line'>            <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="n">Col</span><span class="o">,</span><span class="n">Row</span><span class="o">,</span><span class="n">input</span><span class="o">,</span><span class="n">getCellFormat</span><span class="o">(</span><span class="n">Colour</span><span class="o">.</span><span class="na">GREEN</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;FAIL&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="n">Col</span><span class="o">,</span><span class="n">Row</span><span class="o">,</span><span class="n">input</span><span class="o">,</span><span class="n">getCellFormat</span><span class="o">(</span><span class="n">Colour</span><span class="o">.</span><span class="na">RED</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="n">Col</span><span class="o">,</span><span class="n">Row</span><span class="o">,</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//Label label = new Label(Col,Row,input);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">writableSheet</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">writableWorkbook</span><span class="o">.</span><span class="na">write</span><span class="o">();</span>
</span><span class='line'>        <span class="n">writableWorkbook</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">BiffException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">WriteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">WritableCellFormat</span> <span class="nf">getCellFormat</span><span class="o">(</span><span class="n">Colour</span> <span class="n">colour</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">WriteException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">WritableFont</span> <span class="n">cellFont</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">WritableFont</span><span class="o">(</span><span class="n">WritableFont</span><span class="o">.</span><span class="na">TAHOMA</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>    <span class="n">WritableCellFormat</span> <span class="n">cellFormat</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">WritableCellFormat</span><span class="o">(</span><span class="n">cellFont</span><span class="o">);</span>
</span><span class='line'>    <span class="n">cellFormat</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="n">colour</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cellFormat</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
