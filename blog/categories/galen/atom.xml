<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Galen | Aby George A]]></title>
  <link href="http://www.abygeorgea.com/blog/categories/galen/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2018-03-01T22:07:57+11:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Galen Framework - Getting Started]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/25/galen-framework-getting-started/"/>
    <updated>2017-06-25T05:39:02+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/25/galen-framework-getting-started</id>
    <content type="html"><![CDATA[<p>In previous <a href="{site.root}}blog/2017/06/21/automated-testing-of-responsive-web-design">post</a>, I mentioned that we can use Galen for automated lay out testing. Galen offers a simple solution to test location of objects relative to each other on the page. Galen is implemented using Selenium Web driver. Hence we can use it for normal functional automation testing as well.</p>

<h3>Documentation of Galen</h3>

<ul>
<li>Galen has its own domain specific language to define Specs. Detailed documentation can be found <a href="http://galenframework.com/docs/reference-galen-spec-language-guide/">here</a>.</li>
<li>Galen has its own javascript API which provides a list of functions which make writing test cases easier. Detailed documentation can be found <a href="http://galenframework.com/docs/reference-galen-javascript-api/">here</a>.</li>
<li>Galen pages javascript API is light weight javascript test framework. Details are available <a href="http://galenframework.com/docs/reference-galenpages-javascript-api/">here</a>.</li>
<li>Details of galen test suite syntax are <a href="http://galenframework.com/docs/reference-galen-test-suite-syntax/">here</a>.</li>
<li>Galen framework has a detailed documentation of its usage and functions <a href="http://galenframework.com/docs/all/">here</a>.</li>
</ul>


<h3>Installation</h3>

<p>Below are high-level steps to help you get started.</p>

<ol>
<li>Ensure Java is installed. Galen needs Java version above 1.8</li>
<li>Download binary from <a href="http://galenframework.com/download/">http://galenframework.com/download/</a></li>
<li>Extract the zip file</li>
<li>Add the location of extracted files to PATH  environment variables. A detailed guide for older versions of Windows is available <a href="http://mindengine.net/post/2014-01-08-configuring-galen-framework-for-windows">here</a>.</li>
<li>Alternatively, on Windows , you can create a bat file to run Galen by changing Path on the fly. Details are in below steps.</li>
</ol>


<h3>Setting up Galen Framework</h3>

<p>There are different framework available for testing responsive design based on Galen. <a href="https://github.com/galenframework/galen-bootstrap">Galen bootstrap</a> is one of such framework which can be reused.</p>

<ul>
<li>Download and extract the project from Github. Keep relevant files only. You can remove</li>
<li>Create an <code>init.js</code> file to load
<code>galen-bootstrap/galen-bootstrap.js</code>script and configure all devices and a website URL for testing. URL mentioned below is an example of responsive web design template.</li>
</ul>


<pre><code class="javascript">load("galen-bootstrap/galen-bootstrap.js");
//$galen.settings.website = "https://alistapart.com/d/responsive-web-design/ex/ex-site-FINAL.html";
//$galen.registerDevice("mobile", inLocalBrowser("mobile emulation", "450x800", ["mobile"]));
//$galen.registerDevice("tablet", inLocalBrowser("tablet emulation", "600x800", ["tablet"]));
//$galen.registerDevice("desktop", inLocalBrowser("desktop emulation", "1024x768", ["desktop"]));
</code></pre>

<p>Note: Uncomment the lines above. Octopress blog engine was throwing error when it tries generate post.</p>

<ul>
<li>Run <code>galen config</code> from the command line with the project directory. This will create Galen config file in the location where the command is run.</li>
</ul>


<p><img src="/images/2017/06/25/GalenframeworkGettingStarted01.png" alt="Create Galen Config" /></p>

<ul>
<li>Modify galen.config file to make chrome as default browser and add path to chrome driver. There are other useful configs like range approximation, screenshot, selenium grid etc in the config.</li>
</ul>


<pre><code>galen.default.browser=chrome
$.webdriver.chrome.driver=.\\..\\WebProject\\Driver\\chromedriver.exe
</code></pre>

<ul>
<li>Create a folder named <code>Test</code> for keeping test cases and create test files <code>example.test.js</code>. Copy below content to <code>example.test.js</code>. Make sure to update the relative location of the init.js file created in previous steps. Below content loads init.js file which lists out website URL, device sizes that need to be tested.It then calls a function to test on all devices. Check layout is one of the available javascript API function.</li>
</ul>


<pre><code>load (".\\..\\init.js")
testOnAllDevices("Welcome page test", "/", function (driver, device) {
    checkLayout(driver, "specs/homepage.gspec", device.tags, device.excludedTags);
});
</code></pre>

<ul>
<li>Create a folder named <code>specs</code> and create a spec file named <code>homepage.gspec</code>. We need to update the specs with layout checks . Below is the sample spec for checking image and section intro for the sample URL from init.js. First section defines the objects and its identifier. Second section says that on desktop, image will on left side of section intro and on mobile and tablet, it will be above section intro</li>
</ul>


<pre><code>@objects
    image        id         logo
    menu         css        #page &gt; div &gt; div.mast &gt; ul
    sectionintro    css     #page &gt; div &gt; div.section.intro

= Main  Section =
    image:
        @on desktop
            left-of sectionintro
        @on mobile, tablet
            above sectionintro
</code></pre>

<ul>
<li>Now create a bat file in the main folder to run the galen test cases. Make sure to give relative paths to test file, configs, reports correctly. Modify Path variable to include path location to galen bin. This is not needed if we manually set pah while installing. However, I prefer to have galen bin files as well in source control and point the path to that location so that we don&rsquo;t have any specific dependency outside the project.</li>
</ul>


<pre><code>SET PATH=%PATH%;.\galen-bin
galen test .\\test\\example.test.js  --htmlreport .\reports   --jsonreport .\jsonreports --config .\galen.config
</code></pre>

<p>once all files are created, folder structure will look like below
<img src="/images/2017/06/25/GalenframeworkGettingStarted00.png" alt="" /></p>

<ul>
<li>run the bat file created above. This will ideally run example.test.js file which invokes chrome driver, navigate to the URl, resizes the browser and then check for the specs.It will list out the results in command prompt. Once it completes are all test execution, it creates both HTML report and JSON report in corresponding folder location mentioned in bat file. Below is a sample HTML report, which is self-explanatory.</li>
</ul>


<p>Main report
<img src="/images/2017/06/25/GalenframeworkGettingStarted02.png" alt="" /></p>

<p>If we expand the result for desktop emulation, it will look like below.It will list down each assertion made and indicate whether it is passed or failed.
<img src="/images/2017/06/25/GalenframeworkGettingStarted03.png" alt="" /></p>

<p>If we click on the assertion point, it will show the screenshot taken for that assertion by highlighting the objects which will help for easier verification. Below screenshot shows that image is on left side of section intro as defined in spec file.
<img src="/images/2017/06/25/GalenframeworkGettingStarted04.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Testing of CSS for Responsive Web Design]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/06/21/automated-testing-of-responsive-web-design/"/>
    <updated>2017-06-21T06:15:55+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/06/21/automated-testing-of-responsive-web-design</id>
    <content type="html"><![CDATA[<p>In a world where mobile first seems to be the norm, testing of look and feel of websites on various mobile/tablet devices are essential. More businesses are now adopting Responsive Web designs for developing their web applications and sites.</p>

<h3>What is Responsive Web Design</h3>

<p>According to <a href="https://en.wikipedia.org/wiki/Responsive_web_design">Wikipedia</a>, Responsive web design (RWD) is an approach to web design aimed at allowing desktop webpages to be viewed in response to the size of the screen or web browser one is viewing with. In addition, it&rsquo;s important to understand that Responsive Web Design tasks include offering the same support to a variety of devices for a single website. A site designed with RWD adapts the layout to the viewing environment by using fluid, proportion-based grids, flexible images, and CSS3 media queries, an extension of the @media rule, in the following ways:</p>

<ul>
<li>The fluid grid concept calls for page element sizing to be in relative units like percentages, rather than absolute units like pixels or points.</li>
<li>Flexible images are also sized in relative units, so as to prevent them from displaying outside their containing element.</li>
<li>Media queries allow the page to use different CSS style rules based on characteristics of the device the site is being displayed on, most commonly the width of the browser</li>
</ul>


<h3>How do we test responsiveness</h3>

<p>An ideal option for testing is to test on different physical devices of various screen size. However, it is impossible to get hold of all available mobile/tablet devices in the market. Even if we prioritize the devices using analytics, it is very expensive to buy enough number of devices. Along with this, we need to upgrade to newer version of devices frequently when apple/google/Samsung releases an upgraded version.</p>

<p>Next possible option is to use device emulators like device mode in Chrome dev tools. As pointed out in their <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/">documentation</a>, it is only a close approximation of how the website will look on a mobile device.It have its own limitations which are listed <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports">here</a></p>

<p>Best approach will be to use emulators early in development cycle and once UX design is stabilized, then test it on physical device based on priority obtained by analytics.</p>

<h3>Challenges in testing Responsive Websites</h3>

<p>Testing of responsive websites has its own challenges.</p>

<ul>
<li>Number of Options to be tested or number of  breakpoints which needs to be validated are high</li>
<li><p>Distinctive UI designs for different device screen sizes makes testing time consuming. This adds complexity to testing since it will require testing of below in various screen sizes</p>

<ul>
<li>All UI elements like image, text, controls are aligned properly with each other and doesn&rsquo;t overflow from screen display area</li>
<li>Consistency in font size, color, shades , padding, display orientation etc</li>
<li>Resizing of controls which take inputs (like text) to cater for long content typed in by users.</li>
<li>Other CSS validation specific for mobile and tablet devices</li>
</ul>
</li>
<li><p>It is hard to test all of the above on every iteration manually.</p></li>
<li>Comparing UI &amp; UX &amp; Visual design will require more efforts.</li>
<li>Hard to keep track of every feature that needs to be tested and will have testing fatigue which will result in Non-obvious changes to UI</li>
</ul>


<h3>Automated Responsive Design testing - Galen Framework</h3>

<p>As mentioned above, one of the pain points in responsive design testing is the user fatigue happening over multiple iterations of testing. This can be easily avoided by having an automated test framework. I recently came across galen framework which is an open source framework to test layouts of webpages. You can read about Galen framework <a href="http://galenframework.com/">here.</a>
Galen framework can be used for automation of CSS testing easier. It has evolved over time and has its own Domain specific language and commands which can be used for CSS testing. I will go through galen framework in more details in next post</p>
]]></content>
  </entry>
  
</feed>
