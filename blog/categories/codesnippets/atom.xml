<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Codesnippets | Aby George A]]></title>
  <link href="http://www.abygeorgea.com/blog/categories/codesnippets/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2018-09-08T23:18:07+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Command Line in Remote Machine Using WMI]]></title>
    <link href="http://www.abygeorgea.com/blog/2018/09/08/running-command-line-in-remote-machine-using-wmi/"/>
    <updated>2018-09-08T21:47:52+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2018/09/08/running-command-line-in-remote-machine-using-wmi</id>
    <content type="html"><![CDATA[<p>Recently I had to find a way for running a command line process in server. I had to spend fair bit of time googling for various approaches of doing it. Most of them are by using PSExec.  However there is another approach of using WMI (Windows Management Instrumentation) . Below is one of the approach , which I found at <a href="https://blogs.msdn.microsoft.com/padmanr/2010/05/08/execute-a-process-on-remote-machine-wait-for-it-to-exit-and-retrieve-its-exit-code-using-wmi/">msdn blog</a>.</p>

<p>Below method can be accessed anywhere by</p>

<pre><code>ProcessWMI p = new ProcessWMI();
p.ExecuteRemoteProcessWMI(remoteMachine, sBatFile, timeout);
</code></pre>

<p>The solution has multiple parts as follows</p>

<ol>
<li>Connect to remote machine using remote machine Name, user name and password</li>
<li>Start the remote process. Win32 process and pass the command to be run</li>
<li>Find if the remote process is running and if it does, start an event monitor to wait for it to exit</li>
<li>Once the process exits, retrieve its exit code</li>
</ol>


<pre><code class="Csharp">public class ProcessWMI
{
    public uint ProcessId;
    public int ExitCode;
    public bool EventArrived;
    public ManualResetEvent mre = new ManualResetEvent(false);
    public void ProcessStoptEventArrived(object sender, EventArrivedEventArgs e)
    {
        if ((uint)e.NewEvent.Properties["ProcessId"].Value == ProcessId)
        {
            Console.WriteLine("Process: {0}, Stopped with Code: {1}", (int)(uint)e.NewEvent.Properties["ProcessId"].Value, (int)(uint)e.NewEvent.Properties["ExitStatus"].Value);
            ExitCode = (int)(uint)e.NewEvent.Properties["ExitStatus"].Value;
            EventArrived = true;
            mre.Set();
        }
    }
    public ProcessWMI()
    {
        this.ProcessId = 0;
        ExitCode = -1;
        EventArrived = false;
    }
    public void ExecuteRemoteProcessWMI(string remoteComputerName, string arguments, int WaitTimePerCommand)
    {
        string strUserName = string.Empty;
        try
        {
            ConnectionOptions connOptions = new ConnectionOptions();
            //Note: This will connect  using below credentials. If not provided, it will be based on logged in user
             connOptions.Username = ConfigurationManager.AppSettings["RemoteMachineLogonUser"];
             connOptions.Password = ConfigurationManager.AppSettings["RemoteMachineUserPassword"];

            connOptions.Impersonation = ImpersonationLevel.Impersonate;
            connOptions.EnablePrivileges = true;
            ManagementScope manScope = new ManagementScope(String.Format(@"\\{0}\ROOT\CIMV2", remoteComputerName), connOptions);

            try
            {
                manScope.Connect();
            }
            catch (Exception e)
            {
                throw new Exception("Management Connect to remote machine " + remoteComputerName + " as user " + strUserName + " failed with the following error " + e.Message);
            }
            ObjectGetOptions objectGetOptions = new ObjectGetOptions();
            ManagementPath managementPath = new ManagementPath("Win32_Process");
            using (ManagementClass processClass = new ManagementClass(manScope, managementPath, objectGetOptions))
            {
                using (ManagementBaseObject inParams = processClass.GetMethodParameters("Create"))
                {
                    inParams["CommandLine"] = arguments;
                    using (ManagementBaseObject outParams = processClass.InvokeMethod("Create", inParams, null))
                    {

                        if ((uint)outParams["returnValue"] != 0)
                        {
                            throw new Exception("Error while starting process " + arguments + " creation returned an exit code of " + outParams["returnValue"] + ". It was launched as " + strUserName + " on " + remoteComputerName);
                        }
                        this.ProcessId = (uint)outParams["processId"];
                    }
                }
            }

            SelectQuery CheckProcess = new SelectQuery("Select * from Win32_Process Where ProcessId = " + ProcessId);
            using (ManagementObjectSearcher ProcessSearcher = new ManagementObjectSearcher(manScope, CheckProcess))
            {
                using (ManagementObjectCollection MoC = ProcessSearcher.Get())
                {
                    if (MoC.Count == 0)
                    {
                        throw new Exception("ERROR AS WARNING: Process " + arguments + " terminated before it could be tracked on " + remoteComputerName);
                    }
                }
            }

            WqlEventQuery q = new WqlEventQuery("Win32_ProcessStopTrace");
            using (ManagementEventWatcher w = new ManagementEventWatcher(manScope, q))
            {
                w.EventArrived += new EventArrivedEventHandler(this.ProcessStoptEventArrived);
                w.Start();
                if (!mre.WaitOne(WaitTimePerCommand,false))
                {
                    w.Stop();
                    this.EventArrived = false;
                }
                else
                    w.Stop();
            }
            if (!this.EventArrived)
            {
                SelectQuery sq = new SelectQuery("Select * from Win32_Process Where ProcessId = " + ProcessId);
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(manScope, sq))
                {
                    foreach (ManagementObject queryObj in searcher.Get())
                    {
                        queryObj.InvokeMethod("Terminate", null);
                        queryObj.Dispose();
                        throw new Exception("Process " + arguments + " timed out and was killed on " + remoteComputerName);
                    }
                }
            }
            else
            {
                if (this.ExitCode != 0)
                    throw new Exception("Process " + arguments + "exited with exit code " + this.ExitCode + " on " + remoteComputerName + " run as " + strUserName);
                else
                    Console.WriteLine("process exited with Exit code 0");
            }

        }
        catch (Exception e)
        {
            throw new Exception(string.Format("Execute process failed Machinename {0}, ProcessName {1}, RunAs {2}, Error is {3}, Stack trace {4}", remoteComputerName, arguments, strUserName, e.Message, e.StackTrace), e);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Powershell Remotely]]></title>
    <link href="http://www.abygeorgea.com/blog/2018/09/05/running-powershell-remotely/"/>
    <updated>2018-09-05T22:46:14+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2018/09/05/running-powershell-remotely</id>
    <content type="html"><![CDATA[<p>Code snippet for running power shell on a remote machine. Loosely based on blog post <a href="https://com2kid.wordpress.com/2011/09/22/remotely-executing-commands-in-powershell-using-c/">here</a> and <a href="https://www.codeproject.com/Articles/773685/Enable-Remote-PowerShell-Execution-in-Csharp">here</a></p>

<p>Add reference to System.Management.Automation</p>

<pre><code class="csharp">
using System.Management.Automation; 
using System.Management.Automation.Runspaces;    


  internal void runPowershellRemotely(string location, string scriptToBeRun)
        {
            string userName = ConfigurationManager.AppSettings["RemoteMachineLogonUser"];
            string password = ConfigurationManager.AppSettings["RemoteMachineUserPassword"]; 
           var securestring = new SecureString();
            foreach (Char c in password){
                securestring.AppendChar(c);
            }

            PSCredential creds = new PSCredential(userName, securestring);
            // Remove logging if not needed
            log.Info(String.Format("\tPOWERSHEL : Running Powershell {0} at location {1}", scriptToBeRun, location));
            WSManConnectionInfo connectionInfo = new WSManConnectionInfo();

           connectionInfo.ComputerName = ConfigurationManager.AppSettings["RemoteMachine"];
            connectionInfo.Credential = creds;
            Runspace runspace = RunspaceFactory.CreateRunspace(connectionInfo);
            runspace.Open();
            using (PowerShell ps = PowerShell.Create())
            {
                ps.Runspace = runspace;
                ps.AddScript(@"cd "+ location);
                ps.AddScript(scriptToBeRun);
                try
                {
                    var results = ps.Invoke();
                    log.Info("\tPOWERSHEL : Results from Powershell Script is ---------------------------");
                    foreach(var x in results)
                    {
                        log.Info(x.ToString());
                    }
                    log.Info("\tPOWERSHEL : End of results--------------------------------- ---------------------------");
                }
                catch (Exception e)
                {
                    log.Error("\tPOWERSHEL : Exception from running Powershell Script is" + e.ToString());
                }

            }
            runspace.Close();
        }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Windows Services]]></title>
    <link href="http://www.abygeorgea.com/blog/2018/09/03/working-with-windows-services/"/>
    <updated>2018-09-03T22:59:54+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2018/09/03/working-with-windows-services</id>
    <content type="html"><![CDATA[<p>Below is code snippet for working with windows service. It helps to find status of service, start , stop and restart as required.</p>

<p>We need to pass in details of windows services name ( as shown i services.msc ) and machine name(should be in same network).</p>

<pre><code class="csharp">
using System.ServiceProcess;


            internal string FindStatus(string service, string server)
        {
            var myService = new ServiceController(service, server);
            log.Info(String.Format("\tStatus of {0} service in {1} is {2}", service, server, myService.Status.ToString()));
            return myService.Status.ToString();
        }

        internal string StopService(string service, string server)
        {
            var myService = new ServiceController(service, server);
            if (myService.Status == ServiceControllerStatus.Running)
            {
                myService.Stop();
                myService.WaitForStatus(ServiceControllerStatus.Stopped);
                log.Info(String.Format("\t{0} service Stopped in {1}. Current Status is {2}", service, server, myService.Status.ToString()));
            }
            return myService.Status.ToString();
        }

        internal string StartService(string service, string server)
        {
            var myService = new ServiceController(service, server);
            if (myService.Status == ServiceControllerStatus.Stopped)
            {
                myService.Start();
                myService.WaitForStatus(ServiceControllerStatus.Running);
                log.Info(String.Format("\t{0} service Started in {1}. Current Status is {2}", service, server, myService.Status.ToString()));
            }
            return myService.Status.ToString();
        }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparing XML File Structure Without XSD]]></title>
    <link href="http://www.abygeorgea.com/blog/2018/09/01/comparing-xml-file-structure-without-xsd/"/>
    <updated>2018-09-01T22:05:42+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2018/09/01/comparing-xml-file-structure-without-xsd</id>
    <content type="html"><![CDATA[<p>Code snippet for comparing two xml files without using xsd for validating their structure is same ( nodes and arguments should be same. Values of each node/argument can be different).</p>

<pre><code class="csharp">
internal void VerifyMessageHaveSimilarStructureOfTemplate(string inputXml, string templateXml)
        {
            var docA = new XmlDocument();
            var docB = new XmlDocument();

            docA.LoadXml(inputXml);
            docB.LoadXml(templateXml);

            var isDifferent = DoTheyHaveDiferentStructure(docA.ChildNodes, docB.ChildNodes);
            log.Info("Result of Checking for difference of Input xml with template is : " + isDifferent.ToString());


        }


  private bool DoTheyHaveDiferentStructure(XmlNodeList xmlNodeListA, XmlNodeList xmlNodeListB)
        {
            if (xmlNodeListA.Count != xmlNodeListB.Count) return true;

            for (var i = 0; i &lt; xmlNodeListA.Count; i++)
            {
                var nodeA = xmlNodeListA[i];
                var nodeB = xmlNodeListB[i];

                if (nodeA.Attributes == null)
                {
                    if (nodeB.Attributes != null)
                        return true;
                    else
                        continue;
                }

                if (nodeA.Attributes.Count != nodeB.Attributes.Count || nodeA.Name != nodeB.Name) return true;
                List&lt;string&gt; AttributeNameA = new List&lt;string&gt;();
                List&lt;string&gt; AttributeNameB = new List&lt;string&gt;();
                for (var j = 0; j &lt; nodeA.Attributes.Count; j++)
                {
                    AttributeNameA.Add(nodeA.Attributes[j].Name);
                    AttributeNameB.Add(nodeB.Attributes[j].Name);
                    // -- If attribute position should be same, then include below as well
                    //var attrA = nodeA.Attributes[j];
                    //var attrB = nodeB.Attributes[j];

                    //if (attrA.Name != attrB.Name) return true;
                }
                AttributeNameA.Sort();
                AttributeNameB.Sort();
                if(! AttributeNameA.SequenceEqual(AttributeNameB)) return true;

                if (nodeA.HasChildNodes &amp;&amp; nodeB.HasChildNodes)
                {
                    return HaveDiferentStructure(nodeA.ChildNodes, nodeB.ChildNodes);
                }
                else
                {
                    return true;
                }
            }
            return false;
        }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting Substring Using Javascript]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/07/21/extracting-substring-using-javascript/"/>
    <updated>2017-07-21T06:09:53+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/07/21/extracting-substring-using-javascript</id>
    <content type="html"><![CDATA[<p>In previous blogs <a href="/blog/2017/04/27/stubbing-xml-responses-using-mountebank/">here</a> , I have explained how we return a XML response using mountebank. However , most of the time, we will have to make some modification to the template response before returning a response. Say for example, we may have to replace details like timestamp, or use an input from request parameter and update that in response etc.</p>

<p>One of the easiest way to do this without using other frameworks like xml2js etc is to extract the substring between the node values and replace it . Below is a code snippet which will help to achieve this</p>

<p>The sample xml which we need to return is</p>

<pre><code>&lt;Status&gt;Added&lt;/Status&gt;
&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;
</code></pre>

<p>In above example, assume that we need to replace the inserted record value every time based on the request coming through . We can do that by below</p>

<pre><code class="javascript">
var xmldata = "&lt;Status&gt;Added&lt;/Status&gt;\r\n&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;"

var generatedId = xmldata.match(new RegExp("&lt;GeneratedID&gt;"+"(.*)"+"&lt;/GeneratedID&gt;"));
console.log(generatedId);
// Output will be as below. from Array we can extract the substring, index of its location etc
/*
[ '&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;',
  '12345',
  index: 24,
  input: '&lt;Status&gt;Added&lt;/Status&gt;\r\n&lt;GeneratedID&gt;12345&lt;/GeneratedID&gt;' ]
  */

//so extract data from first location to get substring  
generatedId = xmldata.match(new RegExp("&lt;GeneratedID&gt;"+"(.*)"+"&lt;/GeneratedID&gt;"))[1];
console.log(generatedId);
//Above will print "12345" , which is the expected value
// This can be used for extracting value of xml nodes

//if we need to replace this with another value ( possibly coming from request parameter)
var result = xmldata.replace(generatedId, "99999");
console.log(result);
</code></pre>
]]></content>
  </entry>
  
</feed>
