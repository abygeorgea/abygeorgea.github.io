<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Specflow | Aby George A]]></title>
  <link href="http://www.abygeorgea.com/blog/categories/specflow/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2017-08-22T21:53:29+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Take Screenshots With Selenium in C#]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c/"/>
    <updated>2016-09-06T12:00:23+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c</id>
    <content type="html"><![CDATA[<p>Very frequently testers will meet a situation where they need to take screenshot of webpage they are testing , either for base line or as a proof of test result. This is same with automated testing . Even though automated test cases have their own of way of publishing test results, it is always desirable to keep a proof of result.. Screenshot come to help in this regards. In this blog post , I will explain , how to take a screenshot with Selenium Web Driver with C#. In future I will add another couple of post to explain , how to consolidate the screenshots into a PDF document.</p>

<p>In .NET binding, we have an interface called ITakesScreenshot , which helps to capture screenshot of active window. Below code will help to take screenshot and save it in the path specified while calling the function</p>

<pre><code class="plain">
// PathToFolder is the location where we need to save the screenshot
// FileName is another string where PathToFolder is appended with timestamp
public void TakeScreenShot(string PathToFolder)
{
  string fileName = PathToFolder + DateTime.Now.ToString("HHmmss") +".jpeg";
  Screenshot cp = ((ITakesScreenshot)driver).GetScreenshot();
  cp.SaveAsFile(fileName, System.Drawing.Imaging.ImageFormat.Jpeg);

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath Axis]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/03/element-location-using-xpath-axis/"/>
    <updated>2016-09-03T22:33:04+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/03/element-location-using-xpath-axis</id>
    <content type="html"><![CDATA[<p>During testing we will sometimes come up to situations where developers are not following best practises for testability . We will frequently come up situations where elements doesn&rsquo;t have any unique identifiable property. XPath axis comes to help in those situations. We can identify elements using various XPath Properties</p>

<p>List of various XPath Axis are available in <a href="https://developer.mozilla.org/en-US/docs/Web/XPath/Axes">https://developer.mozilla.org/en-US/docs/Web/XPath/Axes</a>
If you have well-defined properties to identify the element, use them as your locator. Please read  locator strategy  <a href="/blog/2016/08/30/element-location-using-xpath/">Using XPath</a> and <a href="/blog/2016/08/17/identifying-elements-using-locators-in-selenium/">Other Parameters</a></p>

<p>Below are major one&rsquo;s which we will frequently use</p>

<h3>1. ancestor</h3>

<p>This selects all ancestors of current node. That will include parent, grand parents etc
Eg :
<code>
 //td[text()='Product Desc']/ancestor::tr
</code></p>

<h3>2. descendant</h3>

<p>This selects all children of current node. That will include child, grand child etc
Eg:
<code>
/table/descendant::td/input
</code></p>

<h3>3. followingis</h3>

<p>Th selects everything after the closing tag of current node Eg:
<code>
//td[text()='Product Desc']/following::tr
</code></p>

<h3>4. following-sibling</h3>

<p>This selects all siblings after the closing tah of current node.
Eg:
<code>
//td[text()='Product Desc']/followingsibling::td
</code></p>

<h3>5. preceding</h3>

<p>This selects everything prior to current node
Eg:
<code>
 //td[text()='Add to cart']/preceding::tr
</code></p>

<ol>
<li>preceding-sibling</li>
</ol>


<p>This selects all siblings prior to current node
Eg:
<code>
//td[text()='Add to cart']/precedingsibling::td
</code></p>

<h3>7. child</h3>

<p>This selects all children of current node</p>

<h3>8. parent</h3>

<p>This select parent of current node</p>

<p>As usual , you can always use combinations of above in your test. Statements can be constructed in the same way as we traverse the XPath axis</p>

<p>Last , but not least&hellip; we can also use regular expression in XPath.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath/"/>
    <updated>2016-08-30T10:58:16+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath</id>
    <content type="html"><![CDATA[<p>XPath is XML query language which can be used for selecting nodes in XML. Hence it can be used to identify elements from DOM since they are represented as XHTML documents. Selenium WebDriver also supports XPath for locating elements. They also help to look for elements in both direction and hence it is generally slow compared to all other locator strategy. We can use XPath with both absolute path and relative path.</p>

<h4><strong>Absolute XPath</strong></h4>

<p>Absolute Path refers to specific location in DOM, by considering it&rsquo;s complete hierarchy. However this is not an ideal locator strategy since it makes your test very brittle. The absolute path will change if there is any change/realignment etc in UI.</p>

<p>Example of Xpath using absolute path is as below</p>

<pre><code>WebElement userId = driver.FindElement(By.XPath(html/body/div[2]/div/form/input[2]));
</code></pre>

<h4><strong>Relative XPath</strong></h4>

<p>With relative Path , we can find element directly without entire structure. It helps to look out for any elements which matches with specified relative path . Example for a relative path based locator strategy is as below.</p>

<p>Note: Relative XPath starts with &ldquo;//&rdquo;</p>

<pre><code>WebElement userId = driver.FindElement(By.XPath("//input"));
// This retrieve first element with input tag.
WebElement userId = driver.FindElement(By.XPath("//input[2]"));
// This retrieve second element with input tag.
</code></pre>

<h4><strong>Relative XPath  - With Attributes</strong></h4>

<p>If we need to further narrow down our location strategy, we can use Attributes along with relative XPath. There may be situations where we need to multiple attributes to uniquely identify an element. We can also specify locators to identify for ANY attribute</p>

<pre><code>WebElement passwordField = driver.FindElement(By.XPath("//input[@id='password']"));
// Above will identify first element with input tag which also has id as "password".

WebElement LoginButton = driver.FindElement(By.XPath("//input[@type='submit'and @value='Login']"));
//Note you can use "or" as well.
WebElement someField = driver.FindElement(By.XPath("//input[@*='password']"));
// Above will identify first element with input tag which also has any attribute as "password".
</code></pre>

<h4><strong>Relative XPath - Partial Match</strong></h4>

<p>Sometimes there may be situations where element attributes like ID are dynamically generated. Those will generally have some unique part in attributes likeID and
remaining will be generated dynamically , which will keep on changing. This will need a locator strategy which will help us to identify elements using partial match. Main types are</p>

<ul>
<li><p>starts-with()</p></li>
<li><p>ends-with()</p></li>
<li><p>contains()</p></li>
</ul>


<pre><code>WebElement passwordField1 = driver.FindElement(By.XPath("//input[starts-with(@id,'password')]"));
// Above will identify first element with input tag which also has id starting with "password".
WebElement passwordField2 = driver.FindElement(By.XPath("//input[ends-with(@id,'password')]"));
// Above will identify first element with input tag which also has id ending with "password".

WebElement passwordField3 = driver.FindElement(By.XPath("//input[contains(@id,'password')]"));
// Above will identify first element with input tag which also has id containing with "password".
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specflow - Sharing Data Between Steps]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/01/specflow-sharing-data-between-steps/"/>
    <updated>2016-08-01T02:12:23+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/01/specflow-sharing-data-between-steps</id>
    <content type="html"><![CDATA[<p>In Specflow, Step definitions are global. So a scenario can have multiple step definitions which can be present in different classes.  Sometimes, there arise a need to share the data between steps residing in different classes. How do we do it??</p>

<p>There are multiple ways to do it</p>

<ol>
<li><p>Context Injection</p></li>
<li><p>Feature Context</p></li>
<li><p>Scenario Context</p></li>
</ol>


<p>Let us look into more details about how to store and retrieve data using Scenario Context .</p>

<p><strong>ScenarioContext.Current</strong></p>

<p>How do we add a key value pair to Scenario Context ? It is as simple as below</p>

<pre><code>[Given(@"I have entered (.*) and (.*) into the Login Page")]
public void GivenIHaveEnteredAndIntoTheLoginPage(string p0, string p1)
 {
 ScenarioContext.Current.Add("username", p0);
 ScenarioContext.Current.Add("password", p1);
 }
</code></pre>

<p>How do we retrieve the value from ScenarioContext ?</p>

<pre><code>When(@"I press retrieve data")]
public void WhenIRetrieveData()
{
string username = (string)ScenarioContext.Current["username"];
string password = (string)ScenarioContext.Current["password"];

}
</code></pre>

<p>Note: While retrieving , scenarioContext.Current always return an object . Hence we need use explicit casting while retrieving data from scenario context.</p>

<p>In Nut Shell,</p>

<blockquote>**Set a value for a key ( Store data ) **
ScenarioContext.Current.Add(string key, object value);

**Get a value of the key ( Retrieve data) **
var value =(Type) ScenarioContext.Current.[string Key];

var value = ScenarioContext.Current.Get(string Key);</blockquote>


<p>We can use this for storing and passing objects as well</p>

<blockquote>Example of storing webdriver object is as below.(where "browser" is current webdriver object )

ScenarioContext.Current.Add("driver1", browser);

IWebDriver driver2 = (IWebDriver)ScenarioContext.Current["driver1"];</blockquote>

]]></content>
  </entry>
  
</feed>
