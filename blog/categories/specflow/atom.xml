<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Specflow | Aby George A]]></title>
  <link href="http://www.abygeorgea.com/blog/categories/specflow/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2018-05-03T23:51:02+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating HTML Report for Test Execution Result]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/03/05/creating-html-report-for-test-execution%20result/"/>
    <updated>2017-03-05T20:58:13+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/03/05/creating-html-report-for-test-execution result</id>
    <content type="html"><![CDATA[<h3>How to create HTML report with details of test execution</h3>

<p>Very often , we will be required to create a report with details of test execution , so that it can be presented to various stakeholders. Specflow provides a feature to create HTML reports. Let us look into more details about how is this done</p>

<ul>
<li>Read through and understand details of reporting from <a href="https://github.com/techtalk/SpecFlow/wiki/Reporting">specflow</a>.</li>
<li>Ensure packages for Specflow, Nunit, Nunit console runner are already installed.</li>
<li>If you are using Nunit 3, install NUnit.Extension.NUnitV2ResultWriter package via nuget package manager. If this is not installed, we will get an error &ldquo;Unknown result format: nunit2&rdquo;.</li>
<li>Follow setups required for running specflow test cases from command line. Details can be found <a href="/blog/2017/03/04/running-specflow-test-from-command-line-using-nunit">here</a>.</li>
<li>Modify the bat file to create nunit2 reports.
<code>
PathToNunitConsolerunner\nunit3-console.exe --labels=All --out=TestResult.txt "--result=TestResult.xml;format=nunit2" PathTo\AcceptanceTests.dll
</code></li>
<li>Add below command into Bat file. This will create HTML Report called &ldquo;MyResult.html&rdquo;
<code>
PathToSpecfloPackage\specflow.exe nunitexecutionreport PathTo\AcceptanceTests.csproj /out:MyResult.html
</code></li>
<li>Final bat file will look like below.</li>
</ul>


<pre><code>REM bat file to run test cases from console and create xml result file
.\..\..\..\packages\NUnit.ConsoleRunner.3.8.0\tools\nunit3-console.exe  --labels=All --out=TestResult.txt "--result=TestResult.xml;format=nunit2" .\AcceptanceTest.dll

REM Generate html report from test output
.\..\..\..\packages\SpecFlow.2.1.0\tools\specflow.exe nunitexecutionreport .\..\..\AcceptanceTest.csproj /out:MyResult.html
</code></pre>

<p>EDITED: If it throws below error in newer version of Visual Studio  then ensure MS Build tool 2013 is installed. It can be downloaded from <a href="https://www.microsoft.com/en-US/download/details.aspx?id=40760">https://www.microsoft.com/en-US/download/details.aspx?id=40760</a></p>

<p>Error : &ldquo;The tools version "12.0&rdquo; is unrecognized. Available tools versions are &ldquo;2.0&rdquo;, &ldquo;3.5&rdquo;, &ldquo;4.0&rdquo;. &ldquo;,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Specflow Test From Command Line Using Nunit]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/03/04/running-specflow-test-from-command-line-using-nunit/"/>
    <updated>2017-03-04T20:39:59+11:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/03/04/running-specflow-test-from-command-line-using-nunit</id>
    <content type="html"><![CDATA[<h3>How to run specflow test cases from command line</h3>

<p>We can use nunit console runner for running specflow test cases from command line. Running specflow test cases through nunit console runner will help to create test results in xml file, which can then be used for creating html reports.</p>

<p>Procedure for command line test execution are</p>

<ol>
<li>Define Nunit as the test runner.  This is done in config file</li>
</ol>


<pre><code class="xml ">    &lt;specFlow&gt;
          &lt;unitTestProvider name="NUnit"/&gt;
    &lt;/specFlow&gt;
</code></pre>

<ol>
<li>Include Nunit.Console.Runner package to solution via nuget package manager</li>
<li>Run specflow test cases using below command. We can create a bat file with below command and execute them as required.</li>
</ol>


<pre><code>
pathToNunitConsoleRunner\nunit3-console.exe  PathToProject.dll

 example will be
 .\..\..\..\packages\NUnit.ConsoleRunner.3.8.0\tools\nunit3-console.exe   .\BDDFramework.dll
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Take Screenshots With Selenium in C#]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c/"/>
    <updated>2016-09-06T12:00:23+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/06/how-to-take-screenshots-with-selenium-in-c</id>
    <content type="html"><![CDATA[<p>Very frequently testers will meet a situation where they need to take screenshot of webpage they are testing , either for base line or as a proof of test result. This is same with automated testing . Even though automated test cases have their own of way of publishing test results, it is always desirable to keep a proof of result.. Screenshot come to help in this regards. In this blog post , I will explain , how to take a screenshot with Selenium Web Driver with C#. In future I will add another couple of post to explain , how to consolidate the screenshots into a PDF document.</p>

<p>In .NET binding, we have an interface called ITakesScreenshot , which helps to capture screenshot of active window. Below code will help to take screenshot and save it in the path specified while calling the function</p>

<pre><code class="plain">
// PathToFolder is the location where we need to save the screenshot
// FileName is another string where PathToFolder is appended with timestamp
public void TakeScreenShot(string PathToFolder)
{
  string fileName = PathToFolder + DateTime.Now.ToString("HHmmss") +".jpeg";
  Screenshot cp = ((ITakesScreenshot)driver).GetScreenshot();
  cp.SaveAsFile(fileName, System.Drawing.Imaging.ImageFormat.Jpeg);

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath Axis]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/09/03/element-location-using-xpath-axis/"/>
    <updated>2016-09-03T22:33:04+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/09/03/element-location-using-xpath-axis</id>
    <content type="html"><![CDATA[<p>During testing we will sometimes come up to situations where developers are not following best practises for testability . We will frequently come up situations where elements doesn&rsquo;t have any unique identifiable property. XPath axis comes to help in those situations. We can identify elements using various XPath Properties</p>

<p>List of various XPath Axis are available in <a href="https://developer.mozilla.org/en-US/docs/Web/XPath/Axes">https://developer.mozilla.org/en-US/docs/Web/XPath/Axes</a>
If you have well-defined properties to identify the element, use them as your locator. Please read  locator strategy  <a href="/blog/2016/08/30/element-location-using-xpath/">Using XPath</a> and <a href="/blog/2016/08/17/identifying-elements-using-locators-in-selenium/">Other Parameters</a></p>

<p>Below are major one&rsquo;s which we will frequently use</p>

<h3>1. ancestor</h3>

<p>This selects all ancestors of current node. That will include parent, grand parents etc
Eg :
<code>
 //td[text()='Product Desc']/ancestor::tr
</code></p>

<h3>2. descendant</h3>

<p>This selects all children of current node. That will include child, grand child etc
Eg:
<code>
/table/descendant::td/input
</code></p>

<h3>3. followingis</h3>

<p>Th selects everything after the closing tag of current node Eg:
<code>
//td[text()='Product Desc']/following::tr
</code></p>

<h3>4. following-sibling</h3>

<p>This selects all siblings after the closing tah of current node.
Eg:
<code>
//td[text()='Product Desc']/followingsibling::td
</code></p>

<h3>5. preceding</h3>

<p>This selects everything prior to current node
Eg:
<code>
 //td[text()='Add to cart']/preceding::tr
</code></p>

<ol>
<li>preceding-sibling</li>
</ol>


<p>This selects all siblings prior to current node
Eg:
<code>
//td[text()='Add to cart']/precedingsibling::td
</code></p>

<h3>7. child</h3>

<p>This selects all children of current node</p>

<h3>8. parent</h3>

<p>This select parent of current node</p>

<p>As usual , you can always use combinations of above in your test. Statements can be constructed in the same way as we traverse the XPath axis</p>

<p>Last , but not least&hellip; we can also use regular expression in XPath.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Element Location Using XPath]]></title>
    <link href="http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath/"/>
    <updated>2016-08-30T10:58:16+00:00</updated>
    <id>http://www.abygeorgea.com/blog/2016/08/30/element-location-using-xpath</id>
    <content type="html"><![CDATA[<p>XPath is XML query language which can be used for selecting nodes in XML. Hence it can be used to identify elements from DOM since they are represented as XHTML documents. Selenium WebDriver also supports XPath for locating elements. They also help to look for elements in both direction and hence it is generally slow compared to all other locator strategy. We can use XPath with both absolute path and relative path.</p>

<h4><strong>Absolute XPath</strong></h4>

<p>Absolute Path refers to specific location in DOM, by considering it&rsquo;s complete hierarchy. However this is not an ideal locator strategy since it makes your test very brittle. The absolute path will change if there is any change/realignment etc in UI.</p>

<p>Example of Xpath using absolute path is as below</p>

<pre><code>WebElement userId = driver.FindElement(By.XPath(html/body/div[2]/div/form/input[2]));
</code></pre>

<h4><strong>Relative XPath</strong></h4>

<p>With relative Path , we can find element directly without entire structure. It helps to look out for any elements which matches with specified relative path . Example for a relative path based locator strategy is as below.</p>

<p>Note: Relative XPath starts with &ldquo;//&rdquo;</p>

<pre><code>WebElement userId = driver.FindElement(By.XPath("//input"));
// This retrieve first element with input tag.
WebElement userId = driver.FindElement(By.XPath("//input[2]"));
// This retrieve second element with input tag.
</code></pre>

<h4><strong>Relative XPath  - With Attributes</strong></h4>

<p>If we need to further narrow down our location strategy, we can use Attributes along with relative XPath. There may be situations where we need to multiple attributes to uniquely identify an element. We can also specify locators to identify for ANY attribute</p>

<pre><code>WebElement passwordField = driver.FindElement(By.XPath("//input[@id='password']"));
// Above will identify first element with input tag which also has id as "password".

WebElement LoginButton = driver.FindElement(By.XPath("//input[@type='submit'and @value='Login']"));
//Note you can use "or" as well.
WebElement someField = driver.FindElement(By.XPath("//input[@*='password']"));
// Above will identify first element with input tag which also has any attribute as "password".
</code></pre>

<h4><strong>Relative XPath - Partial Match</strong></h4>

<p>Sometimes there may be situations where element attributes like ID are dynamically generated. Those will generally have some unique part in attributes likeID and
remaining will be generated dynamically , which will keep on changing. This will need a locator strategy which will help us to identify elements using partial match. Main types are</p>

<ul>
<li><p>starts-with()</p></li>
<li><p>ends-with()</p></li>
<li><p>contains()</p></li>
</ul>


<pre><code>WebElement passwordField1 = driver.FindElement(By.XPath("//input[starts-with(@id,'password')]"));
// Above will identify first element with input tag which also has id starting with "password".
WebElement passwordField2 = driver.FindElement(By.XPath("//input[ends-with(@id,'password')]"));
// Above will identify first element with input tag which also has id ending with "password".

WebElement passwordField3 = driver.FindElement(By.XPath("//input[contains(@id,'password')]"));
// Above will identify first element with input tag which also has id containing with "password".
</code></pre>
]]></content>
  </entry>
  
</feed>
