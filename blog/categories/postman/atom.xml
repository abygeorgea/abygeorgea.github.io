<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postman | Aby George A]]></title>
  <link href="http://www.abygeorgea.com/blog/categories/postman/atom.xml" rel="self"/>
  <link href="http://www.abygeorgea.com/"/>
  <updated>2017-09-13T22:02:57+10:00</updated>
  <id>http://www.abygeorgea.com/</id>
  <author>
    <name><![CDATA[Aby George A]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postman - Using Data File]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/13/postman-using-data-file/"/>
    <updated>2017-08-13T20:56:01+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/13/postman-using-data-file</id>
    <content type="html"><![CDATA[<p>One of the common requirement for automated testing is to run same test case against multiple test data. Luckily postman supports this by providing facility to use data files. This is available only when we run through postman collection runner or newman.</p>

<p>For this example, let us take a free public API <code>http://services.groupkt.com/country/get/iso2code/AU</code> . This API will return the name of the country depending on the 2 digit code passed. Let us assume that, we need to test this API with multiple country codes. For eg: AU, IN, GB etc.  Let us take a look to see how this can be achieved using postman data files.</p>

<h4>Environment file</h4>

<p>First, create an enviornment Manage Environment option at top right. Create an entry for endpoint as below.</p>

<p><img src="/images/2017/08/13/PostmanDatafile%201.png" alt="EnivironmentSetup" /></p>

<h4>Create Collection</h4>

<p>Next step is to create a collection with a GET request and write tests to verify the response. GET request used here is <code>{EndPoint}/country/get/iso2code/{countrycode}</code></p>

<p>Endpoint is defined in environment file and countrycode will be in data file</p>

<p>Now write some tests to check the results. The data coming from data file will be available under &ldquo;data&rdquo; dictionary  ( similar to global/environment variable. It can be accessed as <code>data.VARIABLENAME</code> or <code>data["VARIABLENAME"]</code> in both test and pre requisite scripts. Below screenshot shows the test which is for validating country name based on the data file.</p>

<p><img src="/images/2017/08/13/PostmanDatafile%202.png" alt="EnivironmentSetup" /></p>

<h4>DateFile</h4>

<p>Postman supports both CSV and JSON format. For CSV files, the first row should be the variable names as the header. All subsequent rows are data row. JSON file should be an array of the keyvalue pair where the variable name is the key.</p>

<p>Data file used in this example is below. It has 3 column, where the first column is test case ID and the second one is country code which is used in the request and the third one is the country name, which is used for asserting the response received. In this example, I am looking for 3 different country codes.</p>

<p><img src="/images/2017/08/13/PostmanDatafile%203.png" alt="datafile" /></p>

<h4>Running Collections</h4>

<p>While running collections, we need to specify below inputs.</p>

<ul>
<li>Collection Name</li>
<li>Environment file</li>
<li>Data File</li>
</ul>


<p>Depending on number of records in the data file, iterations will be auto populated. The results will also show the details for each iteration using the data. Details of response can be found by expanding response body</p>

<p><img src="/images/2017/08/13/PostmanDatafile%204.png" alt="collection" /></p>

<p><img src="/images/2017/08/13/PostmanDatafile%205.png" alt="result" /></p>

<h4>Running through Newman</h4>

<p>We can run same collection through Newman as well</p>

<pre><code>newman run PathToCollectionsFile -e PathToEnvironmentFiles -d PathToDataFile
</code></pre>

<p>In this cases, I should run <code>newman run DataDriven.postman_collection.json -e DataDrivenEnvironment.postman_environment.json   -d data-article.csv</code>.</p>

<p>Results will be as below</p>

<p><img src="/images/2017/08/13/PostmanDatafile%206.png" alt="NewmanResults" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Postman Collection Using Newman]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/07/running-postman-collection-using-newman/"/>
    <updated>2017-08-07T15:46:28+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/07/running-postman-collection-using-newman</id>
    <content type="html"><![CDATA[<p>In previous <a href="/blog/2017/08/05/postman-tutorial/">blog</a>, I explained about how to create a GET request, analyze its response, write test cases for API and to save details to a collection for future use. In this blog, let me explain about how to run collections using Newman.</p>

<h3>What is Newman</h3>

<p>Newman is a command line collection runner for postman. Newman also has feature parity with Postman and it runs collection in the same way how it is run through Postman. Newman also makes it easier to integrate API test case execution with other systems like Jenkins.</p>

<h3>Installing Newman</h3>

<p>Newman is built on Node.js and hence it requires Node.js to be installed as prerequisite. Newman can be installed from npm with below command</p>

<pre><code>$ npm install -g newman
</code></pre>

<h3>Running collection using Newman</h3>

<p>Collections are executed by calling run command in Newman. Basic command for executing collections is</p>

<pre><code>newman run PathToCollectionFile -e PathToEnvironmentFileIfAny
</code></pre>

<p>Below is an example of running collections created in previous blog post using newman.
Command will look like below
<code>newman run /Users/abygeorgea/Projects/Postman/Postman\ Tutorial.postman_collection.json -e /Users/abygeorgea/Projects/Postman/Test.postman_environment.json</code></p>

<h3>Results</h3>

<p>The result of API test case execution will look like below. It has a detailed report of number of iterations, number of request, test scripts, pre-requisites, assertions etc. As per standard, passed ones are shown in green and failed in red. The results look similar to details provided if collections are executed using postman.</p>

<p><img src="/images/2017/08/07/Newman%201.png" alt="NewmanResult" /></p>

<h3>Additional Options of run command</h3>

<p>Newman has various options to customize run. Different options can be found by running with <code>-h</code> flag</p>

<pre><code>newman run -h
</code></pre>

<p>Different options listed are below</p>

<pre><code>Abys-MacBook-Pro:~ abygeorgea$ newman run -h
usage: newman run [-h] [-v VERSION] [--no-color] [--color]
                  [--timeout-request TIMEOUT_REQUEST] [--ignore-redirects]
                  [-k] [--ssl-client-cert SSL_CLIENT_CERT]
                  [--ssl-client-key SSL_CLIENT_KEY]
                  [--ssl-client-passphrase SSL_CLIENT_PASSPHRASE]
                  [-e ENVIRONMENT] [-g GLOBALS] [--folder FOLDER]
                  [-r REPORTERS] [-n ITERATION_COUNT] [-d ITERATION_DATA]
                  [--export-environment [EXPORT_ENVIRONMENT]]
                  [--export-globals [EXPORT_GLOBALS]]
                  [--export-collection [EXPORT_COLLECTION]]
                  [--delay-request DELAY_REQUEST] [--bail] [-x] [--silent]
                  [--disable-unicode] [--global-var GLOBAL_VAR]
                  collection

The "run" command can be used to run Postman Collections

Positional arguments:
  collection            URL or path to a Postman Collection

Optional arguments:
  -h, --help            Show this help message and exit.
  -v VERSION, --version VERSION
                        Display the newman version
  --no-color            Disable colored output
  --color               Force colored output (for use in CI environments)
  --timeout-request TIMEOUT_REQUEST
                        Specify a timeout for requests (in milliseconds)
  --ignore-redirects    If present, Newman will not follow HTTP Redirects
  -k, --insecure        Disables SSL validations.
  --ssl-client-cert SSL_CLIENT_CERT
                        Specify the path to the Client SSL certificate. 
                        Supports .cert and .pfx files.
  --ssl-client-key SSL_CLIENT_KEY
                        Specify the path to the Client SSL key (not needed 
                        for .pfx files).
  --ssl-client-passphrase SSL_CLIENT_PASSPHRASE
                        Specify the Client SSL passphrase (optional, needed 
                        for passphrase protected keys).
  -e ENVIRONMENT, --environment ENVIRONMENT
                        Specify a URL or Path to a Postman Environment
  -g GLOBALS, --globals GLOBALS
                        Specify a URL or Path to a file containing Postman 
                        Globals
  --folder FOLDER       Run a single folder from a collection
  -r REPORTERS, --reporters REPORTERS
                        Specify the reporters to use for this run.
  -n ITERATION_COUNT, --iteration-count ITERATION_COUNT
                        Define the number of iterations to run.
  -d ITERATION_DATA, --iteration-data ITERATION_DATA
                        Specify a data file to use for iterations (either 
                        json or csv)
  --export-environment [EXPORT_ENVIRONMENT]
                        Exports the environment to a file after completing 
                        the run
  --export-globals [EXPORT_GLOBALS]
                        Specify an output file to dump Globals before exiting
  --export-collection [EXPORT_COLLECTION]
                        Specify an output file to save the executed collection
  --delay-request DELAY_REQUEST
                        Specify the extent of delay between requests 
                        (milliseconds)
  --bail                Specify whether or not to gracefully stop a 
                        collection run on encountering the first error
  -x, --suppress-exit-code
                        Specify whether or not to override the default exit 
                        code for the current run
  --silent              Prevents newman from showing output to CLI
  --disable-unicode     Forces unicode compliant symbols to be replaced by 
                        their plain text equivalents
  --global-var GLOBAL_VAR
                        Allows the specification of global variables via the 
                        command line, in a key=value format
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postman Tutorial]]></title>
    <link href="http://www.abygeorgea.com/blog/2017/08/05/postman-tutorial/"/>
    <updated>2017-08-05T07:09:48+10:00</updated>
    <id>http://www.abygeorgea.com/blog/2017/08/05/postman-tutorial</id>
    <content type="html"><![CDATA[<p>Recently one of my colleagues has asked me to train him on using postman and Newman for API testing. Below is a cut down version of training session which I took for him.</p>

<h3>What is Postman</h3>

<p>Postman is an Http client for testing web services. It has a friendly GUI for constructing request and analyzing the response. There is a command line tool called Newman for running the postman collections from command line. This will help to integrate postman to other testing tools.</p>

<h3>How to Install</h3>

<p>Postman is available as both chrome extension and also as a native install. Native install files can be found <a href="https://www.getpostman.com/apps">here</a>.</p>

<h3>Example - GET Request</h3>

<p>In order to trigger a get request, we need to identify below information</p>

<ul>
<li>URL of API</li>
<li>Authentication details</li>
<li>Header details</li>
</ul>


<p>For this example, let us look at a google finance API.  API URL(including parameters) is <a href="http://www.google.com/finance/info?infotype=infoquoteall&amp;q=NSE:BHEL">http://www.google.com/finance/info?infotype=infoquoteall&amp;q=NSE:BHEL</a>
There is no authentication details and header details that need to be passed with this. The <code>params</code> button will list down various parameters passed in a tabular format , which makes it easy to edit.</p>

<p>In postman, Select drop down as <code>GET</code> and enter the API Url. Screen will look like below
<img src="/images/2017/08/05/Postman%20Tutorial%201.png" alt="Request" /></p>

<p>Now hit <code>Send</code> button. This will trigger a call to API and get the response which will then displayed in UI. Screen will look like below</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%202.png" alt="Body" /></p>

<p>Headers returned are</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%203.png" alt="Headers" /></p>

<h3>Writing Tests</h3>

<p>Above is an example of calling an API and analyzing its response. Postman also has a facility to write test cases to verify the response. Test cases are written in javascript. Tests are run after the request is sent and it will allow access to response objects. The editor also provides commonly used code snippets which make it easier to write test.</p>

<p>The Below example is written for calling one of free API mentioned <a href="https://jsonplaceholder.typicode.com">here</a>.
In this example, we have test scripts for checking status code, values in the header, values in response, response time. We can even expand the test cases to complex verifications by writing javascript tests.</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%204.png" alt="Tests" /></p>

<p>We notice following from above screenshot,</p>

<ul>
<li>6 test cases written on the top part to check for the status code, response time, header and response.</li>
<li>The response received on the bottom part.</li>
<li>Test tab shows that 6/6 test cases are passed ( in Green).</li>
</ul>


<p> Now let us dive into details of the test results. Below screenshot shows details of test cases and their status.</p>

<p> <img src="/images/2017/08/05/Postman%20Tutorial%205.png" alt="Test Result" /></p>

<h3>Collections</h3>

<p>We can save the current request and it associated tests ( if any) for future use in postman. It can also be exported and shared with others. Select option as <code>Save As</code> from drop down next to <code>Save</code>. We can specify request name, provide a description and select a folder and sub folder to save the response.</p>

<p> <img src="/images/2017/08/05/Postman%20Tutorial%206.png" alt="Collections" /></p>

<p> Once saved, it will be available for use in collections.</p>

<p>  <img src="/images/2017/08/05/Postman%20Tutorial%207.png" alt="Collections" /></p>

<h3>Environments</h3>

<p>Very frequently, we will have to run API test in different environments. Most of the time, there will be few differences in the requests, like different URL. In such cases, we can use environments in Postman.</p>

<p>Click on the Settings button on top right corner and select <code>Manage environments</code>. This is open up a new pop up where we can add Environment or import an existing environment file. For this tutorial, we will use Add option.</p>

<p>  <img src="/images/2017/08/05/Postman%20Tutorial%208.png" alt="Environment" /></p>

<p> Now we can specify all unique parameter for each environment. In this case, I have given a key called &ldquo;URL&rdquo; and entered corresponding values and saved it as an environment named <code>Test</code>.</p>

<p> <img src="/images/2017/08/05/Postman%20Tutorial%209.png" alt="Environment" /></p>

<p> <img src="/images/2017/08/05/Postman%20Tutorial%2010.png" alt="Environment" /></p>

<p> Now let us run the request using environments. First step is to replace <code>https://jsonplaceholder.typicode.com</code> with <code>url</code> in double curly braces. Then select <code>Test</code> in the Environment drop down at the top. Now click send. This will execute the request and run all associated test cases. Postman will dynamically replace  with corresponding URL value specified in selected environment file. So assuming we have different environment files, each time the request will be sent to different URL based on environment selected. We can have any number of keys and values in one environment file.</p>

<p>  <img src="/images/2017/08/05/Postman%20Tutorial%2011.png" alt="Environment" /></p>

<p>  From above, we can see that one test case is failed. Let us have a look into failed test case.</p>

<p>   <img src="/images/2017/08/05/Postman%20Tutorial%2012.png" alt="Environment" /></p>

<p>  Failed test case is for the time taken for the response. Current request took 1491 ms which is higher than expected 200ms.</p>

<h3>Exporting Collections and environment files</h3>

<p>Postman provides facility to export collections and environment files as JSON. This helps to share the details with other team members and also to use Newman for running postman collections. Let us have a look into how to export them.</p>

<p><strong>Exporting Collections</strong></p>

<ul>
<li>Click on Collections Tab.</li>
<li>Click on <code>...</code> next to Collections Name.</li>
<li>Click on Export.</li>
<li><p>Select V2 option and save the file.</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%2013.png" alt="Collection" /></p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%2014.png" alt="Collection" /></p></li>
</ul>


<p><strong>Exporting Environment File</strong></p>

<ul>
<li>Click on Settings button on top right corner.</li>
<li>Click on Manage environment.</li>
<li><p>Download the file.</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%2015.png" alt="Export" /></p></li>
</ul>


<h3>Running Collections Using Postman Collection Runner</h3>

<p>Postman provides a feature to run collections using collection Runner.</p>

<ul>
<li>Click on Runner button on Top left to open collection runner</li>
<li><p>Select Collection name in drop down and select environment and then hit <code>Start Run</code>.</p>

<p><img src="/images/2017/08/05/Postman%20Tutorial%2016.png" alt="Collection Runner" /></p></li>
</ul>


<p>This will trigger execution of request and test cases mentioned in collection and results will be shown. Also note that collection runner has additional options like number of iteration, delay before sending request , input from data file etc .</p>

<p>Once execution is complete, result will be shown like below. It will have details of all assertions done and options to export results for future verification.
  <img src="/images/2017/08/05/Postman%20Tutorial%2017.png" alt="Collection Runner" /></p>

<h3>What Next ?</h3>

<p>In this post, I have explain basic usage of postman for API testing . However the functionalities provided by postman is much more than above. We can also use Newman , which is command line collection runner , to execute collections. I will write another post about it sometime soon.</p>
]]></content>
  </entry>
  
</feed>
